{"ast":null,"code":"/*\ncolors.js\n\nCopyright (c) 2010\n\nMarak Squires\nAlexis Sellier (cloudhead)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\nvar isHeadless = false;\n\nif (typeof module !== 'undefined') {\n  isHeadless = true;\n}\n\nif (!isHeadless) {\n  var exports = {};\n  var module = {};\n  var colors = exports;\n  exports.mode = \"browser\";\n} else {\n  exports.mode = \"console\";\n} //\n// Prototypes the string object to have additional method calls that add terminal colors\n//\n\n\nvar addProperty = function addProperty(color, func) {\n  exports[color] = function (str) {\n    return func.apply(str);\n  };\n\n  String.prototype.__defineGetter__(color, func);\n};\n\nfunction stylize(str, style) {\n  var styles;\n\n  if (exports.mode === 'console') {\n    styles = {\n      //styles\n      'bold': ['\\x1B[1m', '\\x1B[22m'],\n      'italic': ['\\x1B[3m', '\\x1B[23m'],\n      'underline': ['\\x1B[4m', '\\x1B[24m'],\n      'inverse': ['\\x1B[7m', '\\x1B[27m'],\n      'strikethrough': ['\\x1B[9m', '\\x1B[29m'],\n      //text colors\n      //grayscale\n      'white': ['\\x1B[37m', '\\x1B[39m'],\n      'grey': ['\\x1B[90m', '\\x1B[39m'],\n      'black': ['\\x1B[30m', '\\x1B[39m'],\n      //colors\n      'blue': ['\\x1B[34m', '\\x1B[39m'],\n      'cyan': ['\\x1B[36m', '\\x1B[39m'],\n      'green': ['\\x1B[32m', '\\x1B[39m'],\n      'magenta': ['\\x1B[35m', '\\x1B[39m'],\n      'red': ['\\x1B[31m', '\\x1B[39m'],\n      'yellow': ['\\x1B[33m', '\\x1B[39m'],\n      //background colors\n      //grayscale\n      'whiteBG': ['\\x1B[47m', '\\x1B[49m'],\n      'greyBG': ['\\x1B[49;5;8m', '\\x1B[49m'],\n      'blackBG': ['\\x1B[40m', '\\x1B[49m'],\n      //colors\n      'blueBG': ['\\x1B[44m', '\\x1B[49m'],\n      'cyanBG': ['\\x1B[46m', '\\x1B[49m'],\n      'greenBG': ['\\x1B[42m', '\\x1B[49m'],\n      'magentaBG': ['\\x1B[45m', '\\x1B[49m'],\n      'redBG': ['\\x1B[41m', '\\x1B[49m'],\n      'yellowBG': ['\\x1B[43m', '\\x1B[49m']\n    };\n  } else if (exports.mode === 'browser') {\n    styles = {\n      //styles\n      'bold': ['<b>', '</b>'],\n      'italic': ['<i>', '</i>'],\n      'underline': ['<u>', '</u>'],\n      'inverse': ['<span style=\"background-color:black;color:white;\">', '</span>'],\n      'strikethrough': ['<del>', '</del>'],\n      //text colors\n      //grayscale\n      'white': ['<span style=\"color:white;\">', '</span>'],\n      'grey': ['<span style=\"color:gray;\">', '</span>'],\n      'black': ['<span style=\"color:black;\">', '</span>'],\n      //colors\n      'blue': ['<span style=\"color:blue;\">', '</span>'],\n      'cyan': ['<span style=\"color:cyan;\">', '</span>'],\n      'green': ['<span style=\"color:green;\">', '</span>'],\n      'magenta': ['<span style=\"color:magenta;\">', '</span>'],\n      'red': ['<span style=\"color:red;\">', '</span>'],\n      'yellow': ['<span style=\"color:yellow;\">', '</span>'],\n      //background colors\n      //grayscale\n      'whiteBG': ['<span style=\"background-color:white;\">', '</span>'],\n      'greyBG': ['<span style=\"background-color:gray;\">', '</span>'],\n      'blackBG': ['<span style=\"background-color:black;\">', '</span>'],\n      //colors\n      'blueBG': ['<span style=\"background-color:blue;\">', '</span>'],\n      'cyanBG': ['<span style=\"background-color:cyan;\">', '</span>'],\n      'greenBG': ['<span style=\"background-color:green;\">', '</span>'],\n      'magentaBG': ['<span style=\"background-color:magenta;\">', '</span>'],\n      'redBG': ['<span style=\"background-color:red;\">', '</span>'],\n      'yellowBG': ['<span style=\"background-color:yellow;\">', '</span>']\n    };\n  } else if (exports.mode === 'none') {\n    return str + '';\n  } else {\n    console.log('unsupported mode, try \"browser\", \"console\" or \"none\"');\n  }\n\n  return styles[style][0] + str + styles[style][1];\n}\n\nfunction applyTheme(theme) {\n  //\n  // Remark: This is a list of methods that exist\n  // on String that you should not overwrite.\n  //\n  var stringPrototypeBlacklist = ['__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', 'charAt', 'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'charCodeAt', 'indexOf', 'lastIndexof', 'length', 'localeCompare', 'match', 'replace', 'search', 'slice', 'split', 'substring', 'toLocaleLowerCase', 'toLocaleUpperCase', 'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight'];\n  Object.keys(theme).forEach(function (prop) {\n    if (stringPrototypeBlacklist.indexOf(prop) !== -1) {\n      console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\\'t want to override. Ignoring style name');\n    } else {\n      if (typeof theme[prop] === 'string') {\n        addProperty(prop, function () {\n          return exports[theme[prop]](this);\n        });\n      } else {\n        addProperty(prop, function () {\n          var ret = this;\n\n          for (var t = 0; t < theme[prop].length; t++) {\n            ret = exports[theme[prop][t]](ret);\n          }\n\n          return ret;\n        });\n      }\n    }\n  });\n} //\n// Iterate through all default styles and colors\n//\n\n\nvar x = ['bold', 'underline', 'strikethrough', 'italic', 'inverse', 'grey', 'black', 'yellow', 'red', 'green', 'blue', 'white', 'cyan', 'magenta', 'greyBG', 'blackBG', 'yellowBG', 'redBG', 'greenBG', 'blueBG', 'whiteBG', 'cyanBG', 'magentaBG'];\nx.forEach(function (style) {\n  // __defineGetter__ at the least works in more browsers\n  // http://robertnyman.com/javascript/javascript-getters-setters.html\n  // Object.defineProperty only works in Chrome\n  addProperty(style, function () {\n    return stylize(this, style);\n  });\n});\n\nfunction sequencer(map) {\n  return function () {\n    if (!isHeadless) {\n      return this.replace(/( )/, '$1');\n    }\n\n    var exploded = this.split(\"\"),\n        i = 0;\n    exploded = exploded.map(map);\n    return exploded.join(\"\");\n  };\n}\n\nvar rainbowMap = function () {\n  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta']; //RoY G BiV\n\n  return function (letter, i, exploded) {\n    if (letter === \" \") {\n      return letter;\n    } else {\n      return stylize(letter, rainbowColors[i++ % rainbowColors.length]);\n    }\n  };\n}();\n\nexports.themes = {};\n\nexports.addSequencer = function (name, map) {\n  addProperty(name, sequencer(map));\n};\n\nexports.addSequencer('rainbow', rainbowMap);\nexports.addSequencer('zebra', function (letter, i, exploded) {\n  return i % 2 === 0 ? letter : letter.inverse;\n});\n\nexports.setTheme = function (theme) {\n  if (typeof theme === 'string') {\n    try {\n      exports.themes[theme] = require(theme);\n      applyTheme(exports.themes[theme]);\n      return exports.themes[theme];\n    } catch (err) {\n      console.log(err);\n      return err;\n    }\n  } else {\n    applyTheme(theme);\n  }\n};\n\naddProperty('stripColors', function () {\n  return (\"\" + this).replace(/\\x1B\\[\\d+m/g, '');\n}); // please no\n\nfunction zalgo(text, options) {\n  var soul = {\n    \"up\": ['̍', '̎', '̄', '̅', '̿', '̑', '̆', '̐', '͒', '͗', '͑', '̇', '̈', '̊', '͂', '̓', '̈', '͊', '͋', '͌', '̃', '̂', '̌', '͐', '̀', '́', '̋', '̏', '̒', '̓', '̔', '̽', '̉', 'ͣ', 'ͤ', 'ͥ', 'ͦ', 'ͧ', 'ͨ', 'ͩ', 'ͪ', 'ͫ', 'ͬ', 'ͭ', 'ͮ', 'ͯ', '̾', '͛', '͆', '̚'],\n    \"down\": ['̖', '̗', '̘', '̙', '̜', '̝', '̞', '̟', '̠', '̤', '̥', '̦', '̩', '̪', '̫', '̬', '̭', '̮', '̯', '̰', '̱', '̲', '̳', '̹', '̺', '̻', '̼', 'ͅ', '͇', '͈', '͉', '͍', '͎', '͓', '͔', '͕', '͖', '͙', '͚', '̣'],\n    \"mid\": ['̕', '̛', '̀', '́', '͘', '̡', '̢', '̧', '̨', '̴', '̵', '̶', '͜', '͝', '͞', '͟', '͠', '͢', '̸', '̷', '͡', ' ҉']\n  },\n      all = [].concat(soul.up, soul.down, soul.mid),\n      zalgo = {};\n\n  function randomNumber(range) {\n    var r = Math.floor(Math.random() * range);\n    return r;\n  }\n\n  function is_char(character) {\n    var bool = false;\n    all.filter(function (i) {\n      bool = i === character;\n    });\n    return bool;\n  }\n\n  function heComes(text, options) {\n    var result = '',\n        counts,\n        l;\n    options = options || {};\n    options[\"up\"] = options[\"up\"] || true;\n    options[\"mid\"] = options[\"mid\"] || true;\n    options[\"down\"] = options[\"down\"] || true;\n    options[\"size\"] = options[\"size\"] || \"maxi\";\n    text = text.split('');\n\n    for (l in text) {\n      if (is_char(l)) {\n        continue;\n      }\n\n      result = result + text[l];\n      counts = {\n        \"up\": 0,\n        \"down\": 0,\n        \"mid\": 0\n      };\n\n      switch (options.size) {\n        case 'mini':\n          counts.up = randomNumber(8);\n          counts.min = randomNumber(2);\n          counts.down = randomNumber(8);\n          break;\n\n        case 'maxi':\n          counts.up = randomNumber(16) + 3;\n          counts.min = randomNumber(4) + 1;\n          counts.down = randomNumber(64) + 3;\n          break;\n\n        default:\n          counts.up = randomNumber(8) + 1;\n          counts.mid = randomNumber(6) / 2;\n          counts.down = randomNumber(8) + 1;\n          break;\n      }\n\n      var arr = [\"up\", \"mid\", \"down\"];\n\n      for (var d in arr) {\n        var index = arr[d];\n\n        for (var i = 0; i <= counts[index]; i++) {\n          if (options[index]) {\n            result = result + soul[index][randomNumber(soul[index].length)];\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  return heComes(text);\n} // don't summon zalgo\n\n\naddProperty('zalgo', function () {\n  return zalgo(this);\n});","map":null,"metadata":{},"sourceType":"script"}