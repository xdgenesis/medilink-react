{"ast":null,"code":"//'use strict';\nvar program = require('commander'),\n    colors = require('colors'),\n    path = require('path'),\n    fs = require('fs'),\n    join = path.join,\n    pkg = require('./package.json'),\n    version = pkg.version;\n\nvar boilerplates = ['site', 'h5bp', 'sitemap', 'bootstrap'];\nvar readable = [boilerplates.slice(0, -1).join(', '), boilerplates.slice(-1)[0]].join(' or ');\ncolors.setTheme({\n  input: 'grey',\n  info: 'green',\n  warn: 'yellow'\n});\n\nmodule.exports = function (argv) {\n  // usage\n  program.version(version).usage('[options] <dest>').option('-b, --boilerplate <name>', 'Generate assemble boilerplate <name>', 'site', boilerplates).option('-d, --directory <path>', 'Destination of generated boilerplate <path>').option('-p, --post \"Your Post Title\"', 'Create new post'); // custom help\n\n  program.on('--help', function () {\n    console.log('  Examples:');\n    console.log('');\n    console.log('    Install'.info + ' boilerplate-site'.input + ' to myapp directory'.info);\n    console.log('');\n    console.log('    $ assemble myapp');\n    console.log('');\n    console.log('    Install'.info + ' boilerplate-h5bp'.input + ' to myapp directory'.info);\n    console.log('');\n    console.log('    $ assemble -b h5bp -d myapp');\n    console.log('');\n  }); // parse argv\n\n  program.parse(process.argv); // args void of cmd\n\n  var args = process.argv.slice(3); // Not exist\n\n  if (boilerplates.indexOf(program.boilerplate) === -1) {\n    console.log('\\n Please choose either: %s\\n'.input, readable.info);\n    process.exit(0);\n  } // Coming soon\n\n\n  if (program.boilerplate !== 'site') {\n    console.log('\\n  Not implemen yet, Coming soon!'.input + '\\n');\n    process.exit(0);\n  }\n  /**\n   * Destination path.\n   */\n\n\n  var destination = program.args[0] || process.cwd();\n  /**\n   * Boilerplates directory.\n   */\n\n  var boilerplate = './boilerplates/' + (program.boilerplate || boilerplates[0]);\n  /**\n   * Initialize a new `Assemble Boilerplate` with the given `name`.\n   *\n   * @param {String} name\n   * @ref https://github.com/assemble/boilerplates\n   */\n\n  function Boilerplate(boilerpath) {\n    this.path = boilerpath;\n    this.contentPath = this.path + '/content';\n    console.log(this);\n    this.mod = require(this.path);\n    this.values = {};\n    this.directories = {};\n  }\n  /**\n   * Initialize boilerplate at `destination`.\n   *\n   * @param {String} destination\n   */\n\n\n  Boilerplate.prototype.init = function (dest) {\n    var self = this,\n        vars = this.mod.variables;\n    console.log();\n    program.prompt(vars, function (obj) {\n      self.destination = dest + '/' + obj.project;\n      self.values = obj;\n      process.stdin.destroy();\n      self.create();\n    });\n  };\n  /**\n   * Return the files for this boilerplate.\n   *\n   * @return {Array}\n   */\n\n\n  Boilerplate.prototype.__defineGetter__('files', function () {\n    var self = this,\n        files = [];\n\n    (function next(dir) {\n      fs.readdirSync(dir).forEach(function (file) {\n        files.push(file = dir + '/' + file);\n        var stat = fs.statSync(file);\n\n        if (stat.isDirectory()) {\n          self.directories[file] = true;\n          next(file);\n        }\n      });\n    })(this.contentPath);\n\n    return files;\n  });\n  /**\n   * Create the boilerplate files.\n   */\n\n\n  Boilerplate.prototype.create = function () {\n    var self = this;\n    console.log(); // destination\n\n    try {\n      fs.mkdirSync(self.destination, 0775);\n    } catch (err) {// ignore\n    }\n\n    this.files.forEach(function (file) {\n      if (~file.indexOf('.DS_Store')) {\n        return;\n      }\n\n      var path = self.parse(file),\n          out = join(self.destination, path.replace(self.contentPath, '')); // directory\n\n      if (self.directories[file]) {\n        try {\n          fs.mkdirSync(out, 0775);\n          console.log('  create : '.info, out);\n        } catch (err) {} // ignore\n        // file\n\n      } else {\n        var str = self.parse(fs.readFileSync(file, 'utf8'));\n        fs.writeFileSync(out, str);\n        console.log('  create : '.info, out);\n      }\n    });\n    console.log();\n  };\n  /**\n   * Parse `str`.\n   *\n   * @return {String}\n   * @api private\n   */\n\n\n  Boilerplate.prototype.parse = function (str) {\n    var self = this;\n    return str.replace(/\\{\\{([^}]+)\\}\\}/g, function (_, key) {\n      return self.values[key];\n    });\n  }; // create boilerplate\n\n\n  var tmpl = new Boilerplate(boilerplate);\n  tmpl.init(destination);\n};","map":null,"metadata":{},"sourceType":"script"}