{"ast":null,"code":"/*!\n * # Semantic UI 2.4.1 - Dropdown\n * http://github.com/semantic-org/semantic-ui/\n *\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict';\n\n  window = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n  var _module = module;\n\n  module.exports = function (parameters) {\n    var $allModules = $(this),\n        $document = $(document),\n        moduleSelector = $allModules.selector || '',\n        hasTouch = 'ontouchstart' in document.documentElement,\n        time = new Date().getTime(),\n        performance = [],\n        query = arguments[0],\n        methodInvoked = typeof query == 'string',\n        queryArguments = [].slice.call(arguments, 1),\n        returnedValue;\n    $allModules.each(function (elementIndex) {\n      var settings = $.isPlainObject(parameters) ? $.extend(true, {}, _module.exports.settings, parameters) : $.extend({}, _module.exports.settings),\n          className = settings.className,\n          message = settings.message,\n          fields = settings.fields,\n          keys = settings.keys,\n          metadata = settings.metadata,\n          namespace = settings.namespace,\n          regExp = settings.regExp,\n          selector = settings.selector,\n          error = settings.error,\n          templates = settings.templates,\n          eventNamespace = '.' + namespace,\n          moduleNamespace = 'module-' + namespace,\n          $module = $(this),\n          $context = $(settings.context),\n          $text = $module.find(selector.text),\n          $search = $module.find(selector.search),\n          $sizer = $module.find(selector.sizer),\n          $input = $module.find(selector.input),\n          $icon = $module.find(selector.icon),\n          $combo = $module.prev().find(selector.text).length > 0 ? $module.prev().find(selector.text) : $module.prev(),\n          $menu = $module.children(selector.menu),\n          $item = $menu.find(selector.item),\n          activated = false,\n          itemActivated = false,\n          internalChange = false,\n          element = this,\n          instance = $module.data(moduleNamespace),\n          _initialLoad,\n          pageLostFocus,\n          willRefocus,\n          elementNamespace,\n          _id,\n          _selectObserver,\n          _menuObserver,\n          module;\n\n      module = {\n        initialize: function initialize() {\n          module.debug('Initializing dropdown', settings);\n\n          if (module.is.alreadySetup()) {\n            module.setup.reference();\n          } else {\n            module.setup.layout();\n\n            if (settings.values) {\n              module.change.values(settings.values);\n            }\n\n            module.refreshData();\n            module.save.defaults();\n            module.restore.selected();\n            module.create.id();\n            module.bind.events();\n            module.observeChanges();\n            module.instantiate();\n          }\n        },\n        instantiate: function instantiate() {\n          module.verbose('Storing instance of dropdown', module);\n          instance = module;\n          $module.data(moduleNamespace, module);\n        },\n        destroy: function destroy() {\n          module.verbose('Destroying previous dropdown', $module);\n          module.remove.tabbable();\n          $module.off(eventNamespace).removeData(moduleNamespace);\n          $menu.off(eventNamespace);\n          $document.off(elementNamespace);\n          module.disconnect.menuObserver();\n          module.disconnect.selectObserver();\n        },\n        observeChanges: function observeChanges() {\n          if ('MutationObserver' in window) {\n            _selectObserver = new MutationObserver(module.event.select.mutation);\n            _menuObserver = new MutationObserver(module.event.menu.mutation);\n            module.debug('Setting up mutation observer', _selectObserver, _menuObserver);\n            module.observe.select();\n            module.observe.menu();\n          }\n        },\n        disconnect: {\n          menuObserver: function menuObserver() {\n            if (_menuObserver) {\n              _menuObserver.disconnect();\n            }\n          },\n          selectObserver: function selectObserver() {\n            if (_selectObserver) {\n              _selectObserver.disconnect();\n            }\n          }\n        },\n        observe: {\n          select: function select() {\n            if (module.has.input()) {\n              _selectObserver.observe($module[0], {\n                childList: true,\n                subtree: true\n              });\n            }\n          },\n          menu: function menu() {\n            if (module.has.menu()) {\n              _menuObserver.observe($menu[0], {\n                childList: true,\n                subtree: true\n              });\n            }\n          }\n        },\n        create: {\n          id: function id() {\n            _id = (Math.random().toString(16) + '000000000').substr(2, 8);\n            elementNamespace = '.' + _id;\n            module.verbose('Creating unique id for element', _id);\n          },\n          userChoice: function userChoice(values) {\n            var $userChoices, $userChoice, isUserValue, html;\n            values = values || module.get.userValues();\n\n            if (!values) {\n              return false;\n            }\n\n            values = $.isArray(values) ? values : [values];\n            $.each(values, function (index, value) {\n              if (module.get.item(value) === false) {\n                html = settings.templates.addition(module.add.variables(message.addResult, value));\n                $userChoice = $('<div />').html(html).attr('data-' + metadata.value, value).attr('data-' + metadata.text, value).addClass(className.addition).addClass(className.item);\n\n                if (settings.hideAdditions) {\n                  $userChoice.addClass(className.hidden);\n                }\n\n                $userChoices = $userChoices === undefined ? $userChoice : $userChoices.add($userChoice);\n                module.verbose('Creating user choices for value', value, $userChoice);\n              }\n            });\n            return $userChoices;\n          },\n          userLabels: function userLabels(value) {\n            var userValues = module.get.userValues();\n\n            if (userValues) {\n              module.debug('Adding user labels', userValues);\n              $.each(userValues, function (index, value) {\n                module.verbose('Adding custom user value');\n                module.add.label(value, value);\n              });\n            }\n          },\n          menu: function menu() {\n            $menu = $('<div />').addClass(className.menu).appendTo($module);\n          },\n          sizer: function sizer() {\n            $sizer = $('<span />').addClass(className.sizer).insertAfter($search);\n          }\n        },\n        search: function search(query) {\n          query = query !== undefined ? query : module.get.query();\n          module.verbose('Searching for query', query);\n\n          if (module.has.minCharacters(query)) {\n            module.filter(query);\n          } else {\n            module.hide();\n          }\n        },\n        select: {\n          firstUnfiltered: function firstUnfiltered() {\n            module.verbose('Selecting first non-filtered element');\n            module.remove.selectedItem();\n            $item.not(selector.unselectable).not(selector.addition + selector.hidden).eq(0).addClass(className.selected);\n          },\n          nextAvailable: function nextAvailable($selected) {\n            $selected = $selected.eq(0);\n            var $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),\n                $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),\n                hasNext = $nextAvailable.length > 0;\n\n            if (hasNext) {\n              module.verbose('Moving selection to', $nextAvailable);\n              $nextAvailable.addClass(className.selected);\n            } else {\n              module.verbose('Moving selection to', $prevAvailable);\n              $prevAvailable.addClass(className.selected);\n            }\n          }\n        },\n        setup: {\n          api: function api() {\n            var apiSettings = {\n              debug: settings.debug,\n              urlData: {\n                value: module.get.value(),\n                query: module.get.query()\n              },\n              on: false\n            };\n            module.verbose('First request, initializing API');\n            $module.api(apiSettings);\n          },\n          layout: function layout() {\n            if ($module.is('select')) {\n              module.setup.select();\n              module.setup.returnedObject();\n            }\n\n            if (!module.has.menu()) {\n              module.create.menu();\n            }\n\n            if (module.is.search() && !module.has.search()) {\n              module.verbose('Adding search input');\n              $search = $('<input />').addClass(className.search).prop('autocomplete', 'off').insertBefore($text);\n            }\n\n            if (module.is.multiple() && module.is.searchSelection() && !module.has.sizer()) {\n              module.create.sizer();\n            }\n\n            if (settings.allowTab) {\n              module.set.tabbable();\n            }\n          },\n          select: function select() {\n            var selectValues = module.get.selectValues();\n            module.debug('Dropdown initialized on a select', selectValues);\n\n            if ($module.is('select')) {\n              $input = $module;\n            } // see if select is placed correctly already\n\n\n            if ($input.parent(selector.dropdown).length > 0) {\n              module.debug('UI dropdown already exists. Creating dropdown menu only');\n              $module = $input.closest(selector.dropdown);\n\n              if (!module.has.menu()) {\n                module.create.menu();\n              }\n\n              $menu = $module.children(selector.menu);\n              module.setup.menu(selectValues);\n            } else {\n              module.debug('Creating entire dropdown from select');\n              $module = $('<div />').attr('class', $input.attr('class')).addClass(className.selection).addClass(className.dropdown).html(templates.dropdown(selectValues)).insertBefore($input);\n\n              if ($input.hasClass(className.multiple) && $input.prop('multiple') === false) {\n                module.error(error.missingMultiple);\n                $input.prop('multiple', true);\n              }\n\n              if ($input.is('[multiple]')) {\n                module.set.multiple();\n              }\n\n              if ($input.prop('disabled')) {\n                module.debug('Disabling dropdown');\n                $module.addClass(className.disabled);\n              }\n\n              $input.removeAttr('class').detach().prependTo($module);\n            }\n\n            module.refresh();\n          },\n          menu: function menu(values) {\n            $menu.html(templates.menu(values, fields));\n            $item = $menu.find(selector.item);\n          },\n          reference: function reference() {\n            module.debug('Dropdown behavior was called on select, replacing with closest dropdown'); // replace module reference\n\n            $module = $module.parent(selector.dropdown);\n            instance = $module.data(moduleNamespace);\n            element = $module.get(0);\n            module.refresh();\n            module.setup.returnedObject();\n          },\n          returnedObject: function returnedObject() {\n            var $firstModules = $allModules.slice(0, elementIndex),\n                $lastModules = $allModules.slice(elementIndex + 1); // adjust all modules to use correct reference\n\n            $allModules = $firstModules.add($module).add($lastModules);\n          }\n        },\n        refresh: function refresh() {\n          module.refreshSelectors();\n          module.refreshData();\n        },\n        refreshItems: function refreshItems() {\n          $item = $menu.find(selector.item);\n        },\n        refreshSelectors: function refreshSelectors() {\n          module.verbose('Refreshing selector cache');\n          $text = $module.find(selector.text);\n          $search = $module.find(selector.search);\n          $input = $module.find(selector.input);\n          $icon = $module.find(selector.icon);\n          $combo = $module.prev().find(selector.text).length > 0 ? $module.prev().find(selector.text) : $module.prev();\n          $menu = $module.children(selector.menu);\n          $item = $menu.find(selector.item);\n        },\n        refreshData: function refreshData() {\n          module.verbose('Refreshing cached metadata');\n          $item.removeData(metadata.text).removeData(metadata.value);\n        },\n        clearData: function clearData() {\n          module.verbose('Clearing metadata');\n          $item.removeData(metadata.text).removeData(metadata.value);\n          $module.removeData(metadata.defaultText).removeData(metadata.defaultValue).removeData(metadata.placeholderText);\n        },\n        toggle: function toggle() {\n          module.verbose('Toggling menu visibility');\n\n          if (!module.is.active()) {\n            module.show();\n          } else {\n            module.hide();\n          }\n        },\n        show: function show(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (!module.can.show() && module.is.remote()) {\n            module.debug('No API results retrieved, searching before show');\n            module.queryRemote(module.get.query(), module.show);\n          }\n\n          if (module.can.show() && !module.is.active()) {\n            module.debug('Showing dropdown');\n\n            if (module.has.message() && !(module.has.maxSelections() || module.has.allResultsFiltered())) {\n              module.remove.message();\n            }\n\n            if (module.is.allFiltered()) {\n              return true;\n            }\n\n            if (settings.onShow.call(element) !== false) {\n              module.animate.show(function () {\n                if (module.can.click()) {\n                  module.bind.intent();\n                }\n\n                if (module.has.menuSearch()) {\n                  module.focusSearch();\n                }\n\n                module.set.visible();\n                callback.call(element);\n              });\n            }\n          }\n        },\n        hide: function hide(callback) {\n          callback = $.isFunction(callback) ? callback : function () {};\n\n          if (module.is.active() && !module.is.animatingOutward()) {\n            module.debug('Hiding dropdown');\n\n            if (settings.onHide.call(element) !== false) {\n              module.animate.hide(function () {\n                module.remove.visible();\n                callback.call(element);\n              });\n            }\n          }\n        },\n        hideOthers: function hideOthers() {\n          module.verbose('Finding other dropdowns to hide');\n          $allModules.not($module).has(selector.menu + '.' + className.visible).dropdown('hide');\n        },\n        hideMenu: function hideMenu() {\n          module.verbose('Hiding menu  instantaneously');\n          module.remove.active();\n          module.remove.visible();\n          $menu.transition('hide');\n        },\n        hideSubMenus: function hideSubMenus() {\n          var $subMenus = $menu.children(selector.item).find(selector.menu);\n          module.verbose('Hiding sub menus', $subMenus);\n          $subMenus.transition('hide');\n        },\n        bind: {\n          events: function events() {\n            if (hasTouch) {\n              module.bind.touchEvents();\n            }\n\n            module.bind.keyboardEvents();\n            module.bind.inputEvents();\n            module.bind.mouseEvents();\n          },\n          touchEvents: function touchEvents() {\n            module.debug('Touch device detected binding additional touch events');\n\n            if (module.is.searchSelection()) {// do nothing special yet\n            } else if (module.is.single()) {\n              $module.on('touchstart' + eventNamespace, module.event.test.toggle);\n            }\n\n            $menu.on('touchstart' + eventNamespace, selector.item, module.event.item.mouseenter);\n          },\n          keyboardEvents: function keyboardEvents() {\n            module.verbose('Binding keyboard events');\n            $module.on('keydown' + eventNamespace, module.event.keydown);\n\n            if (module.has.search()) {\n              $module.on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input);\n            }\n\n            if (module.is.multiple()) {\n              $document.on('keydown' + elementNamespace, module.event.document.keydown);\n            }\n          },\n          inputEvents: function inputEvents() {\n            module.verbose('Binding input change events');\n            $module.on('change' + eventNamespace, selector.input, module.event.change);\n          },\n          mouseEvents: function mouseEvents() {\n            module.verbose('Binding mouse events');\n\n            if (module.is.multiple()) {\n              $module.on('click' + eventNamespace, selector.label, module.event.label.click).on('click' + eventNamespace, selector.remove, module.event.remove.click);\n            }\n\n            if (module.is.searchSelection()) {\n              $module.on('mousedown' + eventNamespace, module.event.mousedown).on('mouseup' + eventNamespace, module.event.mouseup).on('mousedown' + eventNamespace, selector.menu, module.event.menu.mousedown).on('mouseup' + eventNamespace, selector.menu, module.event.menu.mouseup).on('click' + eventNamespace, selector.icon, module.event.icon.click).on('focus' + eventNamespace, selector.search, module.event.search.focus).on('click' + eventNamespace, selector.search, module.event.search.focus).on('blur' + eventNamespace, selector.search, module.event.search.blur).on('click' + eventNamespace, selector.text, module.event.text.focus);\n\n              if (module.is.multiple()) {\n                $module.on('click' + eventNamespace, module.event.click);\n              }\n            } else {\n              if (settings.on == 'click') {\n                $module.on('click' + eventNamespace, module.event.test.toggle);\n              } else if (settings.on == 'hover') {\n                $module.on('mouseenter' + eventNamespace, module.delay.show).on('mouseleave' + eventNamespace, module.delay.hide);\n              } else {\n                $module.on(settings.on + eventNamespace, module.toggle);\n              }\n\n              $module.on('click' + eventNamespace, selector.icon, module.event.icon.click).on('mousedown' + eventNamespace, module.event.mousedown).on('mouseup' + eventNamespace, module.event.mouseup).on('focus' + eventNamespace, module.event.focus);\n\n              if (module.has.menuSearch()) {\n                $module.on('blur' + eventNamespace, selector.search, module.event.search.blur);\n              } else {\n                $module.on('blur' + eventNamespace, module.event.blur);\n              }\n            }\n\n            $menu.on('mouseenter' + eventNamespace, selector.item, module.event.item.mouseenter).on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave).on('click' + eventNamespace, selector.item, module.event.item.click);\n          },\n          intent: function intent() {\n            module.verbose('Binding hide intent event to document');\n\n            if (hasTouch) {\n              $document.on('touchstart' + elementNamespace, module.event.test.touch).on('touchmove' + elementNamespace, module.event.test.touch);\n            }\n\n            $document.on('click' + elementNamespace, module.event.test.hide);\n          }\n        },\n        unbind: {\n          intent: function intent() {\n            module.verbose('Removing hide intent event from document');\n\n            if (hasTouch) {\n              $document.off('touchstart' + elementNamespace).off('touchmove' + elementNamespace);\n            }\n\n            $document.off('click' + elementNamespace);\n          }\n        },\n        filter: function filter(query) {\n          var searchTerm = query !== undefined ? query : module.get.query(),\n              afterFiltered = function afterFiltered() {\n            if (module.is.multiple()) {\n              module.filterActive();\n            }\n\n            if (query || !query && module.get.activeItem().length == 0) {\n              module.select.firstUnfiltered();\n            }\n\n            if (module.has.allResultsFiltered()) {\n              if (settings.onNoResults.call(element, searchTerm)) {\n                if (settings.allowAdditions) {\n                  if (settings.hideAdditions) {\n                    module.verbose('User addition with no menu, setting empty style');\n                    module.set.empty();\n                    module.hideMenu();\n                  }\n                } else {\n                  module.verbose('All items filtered, showing message', searchTerm);\n                  module.add.message(message.noResults);\n                }\n              } else {\n                module.verbose('All items filtered, hiding dropdown', searchTerm);\n                module.hideMenu();\n              }\n            } else {\n              module.remove.empty();\n              module.remove.message();\n            }\n\n            if (settings.allowAdditions) {\n              module.add.userSuggestion(query);\n            }\n\n            if (module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch()) {\n              module.show();\n            }\n          };\n\n          if (settings.useLabels && module.has.maxSelections()) {\n            return;\n          }\n\n          if (settings.apiSettings) {\n            if (module.can.useAPI()) {\n              module.queryRemote(searchTerm, function () {\n                if (settings.filterRemoteData) {\n                  module.filterItems(searchTerm);\n                }\n\n                afterFiltered();\n              });\n            } else {\n              module.error(error.noAPI);\n            }\n          } else {\n            module.filterItems(searchTerm);\n            afterFiltered();\n          }\n        },\n        queryRemote: function queryRemote(query, callback) {\n          var apiSettings = {\n            errorDuration: false,\n            cache: 'local',\n            throttle: settings.throttle,\n            urlData: {\n              query: query\n            },\n            onError: function onError() {\n              module.add.message(message.serverError);\n              callback();\n            },\n            onFailure: function onFailure() {\n              module.add.message(message.serverError);\n              callback();\n            },\n            onSuccess: function onSuccess(response) {\n              var values = response[fields.remoteValues],\n                  hasRemoteValues = $.isArray(values) && values.length > 0;\n\n              if (hasRemoteValues) {\n                module.remove.message();\n                module.setup.menu({\n                  values: response[fields.remoteValues]\n                });\n              } else {\n                module.add.message(message.noResults);\n              }\n\n              callback();\n            }\n          };\n\n          if (!$module.api('get request')) {\n            module.setup.api();\n          }\n\n          apiSettings = $.extend(true, {}, apiSettings, settings.apiSettings);\n          $module.api('setting', apiSettings).api('query');\n        },\n        filterItems: function filterItems(query) {\n          var searchTerm = query !== undefined ? query : module.get.query(),\n              results = null,\n              escapedTerm = module.escape.string(searchTerm),\n              beginsWithRegExp = new RegExp('^' + escapedTerm, 'igm'); // avoid loop if we're matching nothing\n\n          if (module.has.query()) {\n            results = [];\n            module.verbose('Searching for matching values', searchTerm);\n            $item.each(function () {\n              var $choice = $(this),\n                  text,\n                  value;\n\n              if (settings.match == 'both' || settings.match == 'text') {\n                text = String(module.get.choiceText($choice, false));\n\n                if (text.search(beginsWithRegExp) !== -1) {\n                  results.push(this);\n                  return true;\n                } else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, text)) {\n                  results.push(this);\n                  return true;\n                } else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, text)) {\n                  results.push(this);\n                  return true;\n                }\n              }\n\n              if (settings.match == 'both' || settings.match == 'value') {\n                value = String(module.get.choiceValue($choice, text));\n\n                if (value.search(beginsWithRegExp) !== -1) {\n                  results.push(this);\n                  return true;\n                } else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, value)) {\n                  results.push(this);\n                  return true;\n                } else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, value)) {\n                  results.push(this);\n                  return true;\n                }\n              }\n            });\n          }\n\n          module.debug('Showing only matched items', searchTerm);\n          module.remove.filteredItem();\n\n          if (results) {\n            $item.not(results).addClass(className.filtered);\n          }\n        },\n        fuzzySearch: function fuzzySearch(query, term) {\n          var termLength = term.length,\n              queryLength = query.length;\n          query = query.toLowerCase();\n          term = term.toLowerCase();\n\n          if (queryLength > termLength) {\n            return false;\n          }\n\n          if (queryLength === termLength) {\n            return query === term;\n          }\n\n          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {\n            var queryCharacter = query.charCodeAt(characterIndex);\n\n            while (nextCharacterIndex < termLength) {\n              if (term.charCodeAt(nextCharacterIndex++) === queryCharacter) {\n                continue search;\n              }\n            }\n\n            return false;\n          }\n\n          return true;\n        },\n        exactSearch: function exactSearch(query, term) {\n          query = query.toLowerCase();\n          term = term.toLowerCase();\n\n          if (term.indexOf(query) > -1) {\n            return true;\n          }\n\n          return false;\n        },\n        filterActive: function filterActive() {\n          if (settings.useLabels) {\n            $item.filter('.' + className.active).addClass(className.filtered);\n          }\n        },\n        focusSearch: function focusSearch(skipHandler) {\n          if (module.has.search() && !module.is.focusedOnSearch()) {\n            if (skipHandler) {\n              $module.off('focus' + eventNamespace, selector.search);\n              $search.focus();\n              $module.on('focus' + eventNamespace, selector.search, module.event.search.focus);\n            } else {\n              $search.focus();\n            }\n          }\n        },\n        forceSelection: function forceSelection() {\n          var $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),\n              $activeItem = $item.not(className.filtered).filter('.' + className.active).eq(0),\n              $selectedItem = $currentlySelected.length > 0 ? $currentlySelected : $activeItem,\n              hasSelected = $selectedItem.length > 0;\n\n          if (hasSelected && !module.is.multiple()) {\n            module.debug('Forcing partial selection to selected item', $selectedItem);\n            module.event.item.click.call($selectedItem, {}, true);\n            return;\n          } else {\n            if (settings.allowAdditions) {\n              module.set.selected(module.get.query());\n              module.remove.searchTerm();\n            } else {\n              module.remove.searchTerm();\n            }\n          }\n        },\n        change: {\n          values: function values(_values) {\n            if (!settings.allowAdditions) {\n              module.clear();\n            }\n\n            module.debug('Creating dropdown with specified values', _values);\n            module.setup.menu({\n              values: _values\n            });\n            $.each(_values, function (index, item) {\n              if (item.selected == true) {\n                module.debug('Setting initial selection to', item.value);\n                module.set.selected(item.value);\n                return true;\n              }\n            });\n          }\n        },\n        event: {\n          change: function change() {\n            if (!internalChange) {\n              module.debug('Input changed, updating selection');\n              module.set.selected();\n            }\n          },\n          focus: function focus() {\n            if (settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {\n              module.show();\n            }\n          },\n          blur: function blur(event) {\n            pageLostFocus = document.activeElement === this;\n\n            if (!activated && !pageLostFocus) {\n              module.remove.activeLabel();\n              module.hide();\n            }\n          },\n          mousedown: function mousedown() {\n            if (module.is.searchSelection()) {\n              // prevent menu hiding on immediate re-focus\n              willRefocus = true;\n            } else {\n              // prevents focus callback from occurring on mousedown\n              activated = true;\n            }\n          },\n          mouseup: function mouseup() {\n            if (module.is.searchSelection()) {\n              // prevent menu hiding on immediate re-focus\n              willRefocus = false;\n            } else {\n              activated = false;\n            }\n          },\n          click: function click(event) {\n            var $target = $(event.target); // focus search\n\n            if ($target.is($module)) {\n              if (!module.is.focusedOnSearch()) {\n                module.focusSearch();\n              } else {\n                module.show();\n              }\n            }\n          },\n          search: {\n            focus: function focus() {\n              activated = true;\n\n              if (module.is.multiple()) {\n                module.remove.activeLabel();\n              }\n\n              if (settings.showOnFocus) {\n                module.search();\n              }\n            },\n            blur: function blur(event) {\n              pageLostFocus = document.activeElement === this;\n\n              if (module.is.searchSelection() && !willRefocus) {\n                if (!itemActivated && !pageLostFocus) {\n                  if (settings.forceSelection) {\n                    module.forceSelection();\n                  }\n\n                  module.hide();\n                }\n              }\n\n              willRefocus = false;\n            }\n          },\n          icon: {\n            click: function click(event) {\n              if ($icon.hasClass(className.clear)) {\n                module.clear();\n              } else if (module.can.click()) {\n                module.toggle();\n              }\n            }\n          },\n          text: {\n            focus: function focus(event) {\n              activated = true;\n              module.focusSearch();\n            }\n          },\n          input: function input(event) {\n            if (module.is.multiple() || module.is.searchSelection()) {\n              module.set.filtered();\n            }\n\n            clearTimeout(module.timer);\n            module.timer = setTimeout(module.search, settings.delay.search);\n          },\n          label: {\n            click: function click(event) {\n              var $label = $(this),\n                  $labels = $module.find(selector.label),\n                  $activeLabels = $labels.filter('.' + className.active),\n                  $nextActive = $label.nextAll('.' + className.active),\n                  $prevActive = $label.prevAll('.' + className.active),\n                  $range = $nextActive.length > 0 ? $label.nextUntil($nextActive).add($activeLabels).add($label) : $label.prevUntil($prevActive).add($activeLabels).add($label);\n\n              if (event.shiftKey) {\n                $activeLabels.removeClass(className.active);\n                $range.addClass(className.active);\n              } else if (event.ctrlKey) {\n                $label.toggleClass(className.active);\n              } else {\n                $activeLabels.removeClass(className.active);\n                $label.addClass(className.active);\n              }\n\n              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));\n            }\n          },\n          remove: {\n            click: function click() {\n              var $label = $(this).parent();\n\n              if ($label.hasClass(className.active)) {\n                // remove all selected labels\n                module.remove.activeLabels();\n              } else {\n                // remove this label only\n                module.remove.activeLabels($label);\n              }\n            }\n          },\n          test: {\n            toggle: function toggle(event) {\n              var toggleBehavior = module.is.multiple() ? module.show : module.toggle;\n\n              if (module.is.bubbledLabelClick(event) || module.is.bubbledIconClick(event)) {\n                return;\n              }\n\n              if (module.determine.eventOnElement(event, toggleBehavior)) {\n                event.preventDefault();\n              }\n            },\n            touch: function touch(event) {\n              module.determine.eventOnElement(event, function () {\n                if (event.type == 'touchstart') {\n                  module.timer = setTimeout(function () {\n                    module.hide();\n                  }, settings.delay.touch);\n                } else if (event.type == 'touchmove') {\n                  clearTimeout(module.timer);\n                }\n              });\n              event.stopPropagation();\n            },\n            hide: function hide(event) {\n              module.determine.eventInModule(event, module.hide);\n            }\n          },\n          select: {\n            mutation: function mutation(mutations) {\n              module.debug('<select> modified, recreating menu');\n              var isSelectMutation = false;\n              $.each(mutations, function (index, mutation) {\n                if ($(mutation.target).is('select') || $(mutation.addedNodes).is('select')) {\n                  isSelectMutation = true;\n                  return true;\n                }\n              });\n\n              if (isSelectMutation) {\n                module.disconnect.selectObserver();\n                module.refresh();\n                module.setup.select();\n                module.set.selected();\n                module.observe.select();\n              }\n            }\n          },\n          menu: {\n            mutation: function mutation(mutations) {\n              var mutation = mutations[0],\n                  $addedNode = mutation.addedNodes ? $(mutation.addedNodes[0]) : $(false),\n                  $removedNode = mutation.removedNodes ? $(mutation.removedNodes[0]) : $(false),\n                  $changedNodes = $addedNode.add($removedNode),\n                  isUserAddition = $changedNodes.is(selector.addition) || $changedNodes.closest(selector.addition).length > 0,\n                  isMessage = $changedNodes.is(selector.message) || $changedNodes.closest(selector.message).length > 0;\n\n              if (isUserAddition || isMessage) {\n                module.debug('Updating item selector cache');\n                module.refreshItems();\n              } else {\n                module.debug('Menu modified, updating selector cache');\n                module.refresh();\n              }\n            },\n            mousedown: function mousedown() {\n              itemActivated = true;\n            },\n            mouseup: function mouseup() {\n              itemActivated = false;\n            }\n          },\n          item: {\n            mouseenter: function mouseenter(event) {\n              var $target = $(event.target),\n                  $item = $(this),\n                  $subMenu = $item.children(selector.menu),\n                  $otherMenus = $item.siblings(selector.item).children(selector.menu),\n                  hasSubMenu = $subMenu.length > 0,\n                  isBubbledEvent = $subMenu.find($target).length > 0;\n\n              if (!isBubbledEvent && hasSubMenu) {\n                clearTimeout(module.itemTimer);\n                module.itemTimer = setTimeout(function () {\n                  module.verbose('Showing sub-menu', $subMenu);\n                  $.each($otherMenus, function () {\n                    module.animate.hide(false, $(this));\n                  });\n                  module.animate.show(false, $subMenu);\n                }, settings.delay.show);\n                event.preventDefault();\n              }\n            },\n            mouseleave: function mouseleave(event) {\n              var $subMenu = $(this).children(selector.menu);\n\n              if ($subMenu.length > 0) {\n                clearTimeout(module.itemTimer);\n                module.itemTimer = setTimeout(function () {\n                  module.verbose('Hiding sub-menu', $subMenu);\n                  module.animate.hide(false, $subMenu);\n                }, settings.delay.hide);\n              }\n            },\n            click: function click(event, skipRefocus) {\n              var $choice = $(this),\n                  $target = event ? $(event.target) : $(''),\n                  $subMenu = $choice.find(selector.menu),\n                  text = module.get.choiceText($choice),\n                  value = module.get.choiceValue($choice, text),\n                  hasSubMenu = $subMenu.length > 0,\n                  isBubbledEvent = $subMenu.find($target).length > 0; // prevents IE11 bug where menu receives focus even though `tabindex=-1`\n\n              if (module.has.menuSearch()) {\n                $(document.activeElement).blur();\n              }\n\n              if (!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {\n                if (module.is.searchSelection()) {\n                  if (settings.allowAdditions) {\n                    module.remove.userAddition();\n                  }\n\n                  module.remove.searchTerm();\n\n                  if (!module.is.focusedOnSearch() && !(skipRefocus == true)) {\n                    module.focusSearch(true);\n                  }\n                }\n\n                if (!settings.useLabels) {\n                  module.remove.filteredItem();\n                  module.set.scrollPosition($choice);\n                }\n\n                module.determine.selectAction.call(this, text, value);\n              }\n            }\n          },\n          document: {\n            // label selection should occur even when element has no focus\n            keydown: function keydown(event) {\n              var pressedKey = event.which,\n                  isShortcutKey = module.is.inObject(pressedKey, keys);\n\n              if (isShortcutKey) {\n                var $label = $module.find(selector.label),\n                    $activeLabel = $label.filter('.' + className.active),\n                    activeValue = $activeLabel.data(metadata.value),\n                    labelIndex = $label.index($activeLabel),\n                    labelCount = $label.length,\n                    hasActiveLabel = $activeLabel.length > 0,\n                    hasMultipleActive = $activeLabel.length > 1,\n                    isFirstLabel = labelIndex === 0,\n                    isLastLabel = labelIndex + 1 == labelCount,\n                    isSearch = module.is.searchSelection(),\n                    isFocusedOnSearch = module.is.focusedOnSearch(),\n                    isFocused = module.is.focused(),\n                    caretAtStart = isFocusedOnSearch && module.get.caretPosition() === 0,\n                    $nextLabel;\n\n                if (isSearch && !hasActiveLabel && !isFocusedOnSearch) {\n                  return;\n                }\n\n                if (pressedKey == keys.leftArrow) {\n                  // activate previous label\n                  if ((isFocused || caretAtStart) && !hasActiveLabel) {\n                    module.verbose('Selecting previous label');\n                    $label.last().addClass(className.active);\n                  } else if (hasActiveLabel) {\n                    if (!event.shiftKey) {\n                      module.verbose('Selecting previous label');\n                      $label.removeClass(className.active);\n                    } else {\n                      module.verbose('Adding previous label to selection');\n                    }\n\n                    if (isFirstLabel && !hasMultipleActive) {\n                      $activeLabel.addClass(className.active);\n                    } else {\n                      $activeLabel.prev(selector.siblingLabel).addClass(className.active).end();\n                    }\n\n                    event.preventDefault();\n                  }\n                } else if (pressedKey == keys.rightArrow) {\n                  // activate first label\n                  if (isFocused && !hasActiveLabel) {\n                    $label.first().addClass(className.active);\n                  } // activate next label\n\n\n                  if (hasActiveLabel) {\n                    if (!event.shiftKey) {\n                      module.verbose('Selecting next label');\n                      $label.removeClass(className.active);\n                    } else {\n                      module.verbose('Adding next label to selection');\n                    }\n\n                    if (isLastLabel) {\n                      if (isSearch) {\n                        if (!isFocusedOnSearch) {\n                          module.focusSearch();\n                        } else {\n                          $label.removeClass(className.active);\n                        }\n                      } else if (hasMultipleActive) {\n                        $activeLabel.next(selector.siblingLabel).addClass(className.active);\n                      } else {\n                        $activeLabel.addClass(className.active);\n                      }\n                    } else {\n                      $activeLabel.next(selector.siblingLabel).addClass(className.active);\n                    }\n\n                    event.preventDefault();\n                  }\n                } else if (pressedKey == keys.deleteKey || pressedKey == keys.backspace) {\n                  if (hasActiveLabel) {\n                    module.verbose('Removing active labels');\n\n                    if (isLastLabel) {\n                      if (isSearch && !isFocusedOnSearch) {\n                        module.focusSearch();\n                      }\n                    }\n\n                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);\n                    module.remove.activeLabels($activeLabel);\n                    event.preventDefault();\n                  } else if (caretAtStart && !hasActiveLabel && pressedKey == keys.backspace) {\n                    module.verbose('Removing last label on input backspace');\n                    $activeLabel = $label.last().addClass(className.active);\n                    module.remove.activeLabels($activeLabel);\n                  }\n                } else {\n                  $activeLabel.removeClass(className.active);\n                }\n              }\n            }\n          },\n          keydown: function keydown(event) {\n            var pressedKey = event.which,\n                isShortcutKey = module.is.inObject(pressedKey, keys);\n\n            if (isShortcutKey) {\n              var $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),\n                  $activeItem = $menu.children('.' + className.active).eq(0),\n                  $selectedItem = $currentlySelected.length > 0 ? $currentlySelected : $activeItem,\n                  $visibleItems = $selectedItem.length > 0 ? $selectedItem.siblings(':not(.' + className.filtered + ')').addBack() : $menu.children(':not(.' + className.filtered + ')'),\n                  $subMenu = $selectedItem.children(selector.menu),\n                  $parentMenu = $selectedItem.closest(selector.menu),\n                  inVisibleMenu = $parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0,\n                  hasSubMenu = $subMenu.length > 0,\n                  hasSelectedItem = $selectedItem.length > 0,\n                  selectedIsSelectable = $selectedItem.not(selector.unselectable).length > 0,\n                  delimiterPressed = pressedKey == keys.delimiter && settings.allowAdditions && module.is.multiple(),\n                  isAdditionWithoutMenu = settings.allowAdditions && settings.hideAdditions && (pressedKey == keys.enter || delimiterPressed) && selectedIsSelectable,\n                  $nextItem,\n                  isSubMenuItem,\n                  newIndex; // allow selection with menu closed\n\n              if (isAdditionWithoutMenu) {\n                module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n                module.event.item.click.call($selectedItem, event);\n\n                if (module.is.searchSelection()) {\n                  module.remove.searchTerm();\n                }\n              } // visible menu keyboard shortcuts\n\n\n              if (module.is.visible()) {\n                // enter (select or open sub-menu)\n                if (pressedKey == keys.enter || delimiterPressed) {\n                  if (pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {\n                    module.verbose('Pressed enter on unselectable category, opening sub menu');\n                    pressedKey = keys.rightArrow;\n                  } else if (selectedIsSelectable) {\n                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);\n                    module.event.item.click.call($selectedItem, event);\n\n                    if (module.is.searchSelection()) {\n                      module.remove.searchTerm();\n                    }\n                  }\n\n                  event.preventDefault();\n                } // sub-menu actions\n\n\n                if (hasSelectedItem) {\n                  if (pressedKey == keys.leftArrow) {\n                    isSubMenuItem = $parentMenu[0] !== $menu[0];\n\n                    if (isSubMenuItem) {\n                      module.verbose('Left key pressed, closing sub-menu');\n                      module.animate.hide(false, $parentMenu);\n                      $selectedItem.removeClass(className.selected);\n                      $parentMenu.closest(selector.item).addClass(className.selected);\n                      event.preventDefault();\n                    }\n                  } // right arrow (show sub-menu)\n\n\n                  if (pressedKey == keys.rightArrow) {\n                    if (hasSubMenu) {\n                      module.verbose('Right key pressed, opening sub-menu');\n                      module.animate.show(false, $subMenu);\n                      $selectedItem.removeClass(className.selected);\n                      $subMenu.find(selector.item).eq(0).addClass(className.selected);\n                      event.preventDefault();\n                    }\n                  }\n                } // up arrow (traverse menu up)\n\n\n                if (pressedKey == keys.upArrow) {\n                  $nextItem = hasSelectedItem && inVisibleMenu ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0) : $item.eq(0);\n\n                  if ($visibleItems.index($nextItem) < 0) {\n                    module.verbose('Up key pressed but reached top of current menu');\n                    event.preventDefault();\n                    return;\n                  } else {\n                    module.verbose('Up key pressed, changing active item');\n                    $selectedItem.removeClass(className.selected);\n                    $nextItem.addClass(className.selected);\n                    module.set.scrollPosition($nextItem);\n\n                    if (settings.selectOnKeydown && module.is.single()) {\n                      module.set.selectedItem($nextItem);\n                    }\n                  }\n\n                  event.preventDefault();\n                } // down arrow (traverse menu down)\n\n\n                if (pressedKey == keys.downArrow) {\n                  $nextItem = hasSelectedItem && inVisibleMenu ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0) : $item.eq(0);\n\n                  if ($nextItem.length === 0) {\n                    module.verbose('Down key pressed but reached bottom of current menu');\n                    event.preventDefault();\n                    return;\n                  } else {\n                    module.verbose('Down key pressed, changing active item');\n                    $item.removeClass(className.selected);\n                    $nextItem.addClass(className.selected);\n                    module.set.scrollPosition($nextItem);\n\n                    if (settings.selectOnKeydown && module.is.single()) {\n                      module.set.selectedItem($nextItem);\n                    }\n                  }\n\n                  event.preventDefault();\n                } // page down (show next page)\n\n\n                if (pressedKey == keys.pageUp) {\n                  module.scrollPage('up');\n                  event.preventDefault();\n                }\n\n                if (pressedKey == keys.pageDown) {\n                  module.scrollPage('down');\n                  event.preventDefault();\n                } // escape (close menu)\n\n\n                if (pressedKey == keys.escape) {\n                  module.verbose('Escape key pressed, closing dropdown');\n                  module.hide();\n                }\n              } else {\n                // delimiter key\n                if (delimiterPressed) {\n                  event.preventDefault();\n                } // down arrow (open menu)\n\n\n                if (pressedKey == keys.downArrow && !module.is.visible()) {\n                  module.verbose('Down key pressed, showing dropdown');\n                  module.show();\n                  event.preventDefault();\n                }\n              }\n            } else {\n              if (!module.has.search()) {\n                module.set.selectedLetter(String.fromCharCode(pressedKey));\n              }\n            }\n          }\n        },\n        trigger: {\n          change: function change() {\n            var events = document.createEvent('HTMLEvents'),\n                inputElement = $input[0];\n\n            if (inputElement) {\n              module.verbose('Triggering native change event');\n              events.initEvent('change', true, false);\n              inputElement.dispatchEvent(events);\n            }\n          }\n        },\n        determine: {\n          selectAction: function selectAction(text, value) {\n            module.verbose('Determining action', settings.action);\n\n            if ($.isFunction(module.action[settings.action])) {\n              module.verbose('Triggering preset action', settings.action, text, value);\n              module.action[settings.action].call(element, text, value, this);\n            } else if ($.isFunction(settings.action)) {\n              module.verbose('Triggering user action', settings.action, text, value);\n              settings.action.call(element, text, value, this);\n            } else {\n              module.error(error.action, settings.action);\n            }\n          },\n          eventInModule: function eventInModule(event, callback) {\n            var $target = $(event.target),\n                inDocument = $target.closest(document.documentElement).length > 0,\n                inModule = $target.closest($module).length > 0;\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (inDocument && !inModule) {\n              module.verbose('Triggering event', callback);\n              callback();\n              return true;\n            } else {\n              module.verbose('Event occurred in dropdown, canceling callback');\n              return false;\n            }\n          },\n          eventOnElement: function eventOnElement(event, callback) {\n            var $target = $(event.target),\n                $label = $target.closest(selector.siblingLabel),\n                inVisibleDOM = document.body.contains(event.target),\n                notOnLabel = $module.find($label).length === 0,\n                notInMenu = $target.closest($menu).length === 0;\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (inVisibleDOM && notOnLabel && notInMenu) {\n              module.verbose('Triggering event', callback);\n              callback();\n              return true;\n            } else {\n              module.verbose('Event occurred in dropdown menu, canceling callback');\n              return false;\n            }\n          }\n        },\n        action: {\n          nothing: function nothing() {},\n          activate: function activate(text, value, element) {\n            value = value !== undefined ? value : text;\n\n            if (module.can.activate($(element))) {\n              module.set.selected(value, $(element));\n\n              if (module.is.multiple() && !module.is.allFiltered()) {\n                return;\n              } else {\n                module.hideAndClear();\n              }\n            }\n          },\n          select: function select(text, value, element) {\n            value = value !== undefined ? value : text;\n\n            if (module.can.activate($(element))) {\n              module.set.value(value, text, $(element));\n\n              if (module.is.multiple() && !module.is.allFiltered()) {\n                return;\n              } else {\n                module.hideAndClear();\n              }\n            }\n          },\n          combo: function combo(text, value, element) {\n            value = value !== undefined ? value : text;\n            module.set.selected(value, $(element));\n            module.hideAndClear();\n          },\n          hide: function hide(text, value, element) {\n            module.set.value(value, text, $(element));\n            module.hideAndClear();\n          }\n        },\n        get: {\n          id: function id() {\n            return _id;\n          },\n          defaultText: function defaultText() {\n            return $module.data(metadata.defaultText);\n          },\n          defaultValue: function defaultValue() {\n            return $module.data(metadata.defaultValue);\n          },\n          placeholderText: function placeholderText() {\n            if (settings.placeholder != 'auto' && typeof settings.placeholder == 'string') {\n              return settings.placeholder;\n            }\n\n            return $module.data(metadata.placeholderText) || '';\n          },\n          text: function text() {\n            return $text.text();\n          },\n          query: function query() {\n            return $.trim($search.val());\n          },\n          searchWidth: function searchWidth(value) {\n            value = value !== undefined ? value : $search.val();\n            $sizer.text(value); // prevent rounding issues\n\n            return Math.ceil($sizer.width() + 1);\n          },\n          selectionCount: function selectionCount() {\n            var values = module.get.values(),\n                count;\n            count = module.is.multiple() ? $.isArray(values) ? values.length : 0 : module.get.value() !== '' ? 1 : 0;\n            return count;\n          },\n          transition: function transition($subMenu) {\n            return settings.transition == 'auto' ? module.is.upward($subMenu) ? 'slide up' : 'slide down' : settings.transition;\n          },\n          userValues: function userValues() {\n            var values = module.get.values();\n\n            if (!values) {\n              return false;\n            }\n\n            values = $.isArray(values) ? values : [values];\n            return $.grep(values, function (value) {\n              return module.get.item(value) === false;\n            });\n          },\n          uniqueArray: function uniqueArray(array) {\n            return $.grep(array, function (value, index) {\n              return $.inArray(value, array) === index;\n            });\n          },\n          caretPosition: function caretPosition() {\n            var input = $search.get(0),\n                range,\n                rangeLength;\n\n            if ('selectionStart' in input) {\n              return input.selectionStart;\n            } else if (document.selection) {\n              input.focus();\n              range = document.selection.createRange();\n              rangeLength = range.text.length;\n              range.moveStart('character', -input.value.length);\n              return range.text.length - rangeLength;\n            }\n          },\n          value: function value() {\n            var value = $input.length > 0 ? $input.val() : $module.data(metadata.value),\n                isEmptyMultiselect = $.isArray(value) && value.length === 1 && value[0] === ''; // prevents placeholder element from being selected when multiple\n\n            return value === undefined || isEmptyMultiselect ? '' : value;\n          },\n          values: function values() {\n            var value = module.get.value();\n\n            if (value === '') {\n              return '';\n            }\n\n            return !module.has.selectInput() && module.is.multiple() ? typeof value == 'string' ? // delimited string\n            value.split(settings.delimiter) : '' : value;\n          },\n          remoteValues: function remoteValues() {\n            var values = module.get.values(),\n                remoteValues = false;\n\n            if (values) {\n              if (typeof values == 'string') {\n                values = [values];\n              }\n\n              $.each(values, function (index, value) {\n                var name = module.read.remoteData(value);\n                module.verbose('Restoring value from session data', name, value);\n\n                if (name) {\n                  if (!remoteValues) {\n                    remoteValues = {};\n                  }\n\n                  remoteValues[value] = name;\n                }\n              });\n            }\n\n            return remoteValues;\n          },\n          choiceText: function choiceText($choice, preserveHTML) {\n            preserveHTML = preserveHTML !== undefined ? preserveHTML : settings.preserveHTML;\n\n            if ($choice) {\n              if ($choice.find(selector.menu).length > 0) {\n                module.verbose('Retrieving text of element with sub-menu');\n                $choice = $choice.clone();\n                $choice.find(selector.menu).remove();\n                $choice.find(selector.menuIcon).remove();\n              }\n\n              return $choice.data(metadata.text) !== undefined ? $choice.data(metadata.text) : preserveHTML ? $.trim($choice.html()) : $.trim($choice.text());\n            }\n          },\n          choiceValue: function choiceValue($choice, choiceText) {\n            choiceText = choiceText || module.get.choiceText($choice);\n\n            if (!$choice) {\n              return false;\n            }\n\n            return $choice.data(metadata.value) !== undefined ? String($choice.data(metadata.value)) : typeof choiceText === 'string' ? $.trim(choiceText.toLowerCase()) : String(choiceText);\n          },\n          inputEvent: function inputEvent() {\n            var input = $search[0];\n\n            if (input) {\n              return input.oninput !== undefined ? 'input' : input.onpropertychange !== undefined ? 'propertychange' : 'keyup';\n            }\n\n            return false;\n          },\n          selectValues: function selectValues() {\n            var select = {};\n            select.values = [];\n            $module.find('option').each(function () {\n              var $option = $(this),\n                  name = $option.html(),\n                  disabled = $option.attr('disabled'),\n                  value = $option.attr('value') !== undefined ? $option.attr('value') : name;\n\n              if (settings.placeholder === 'auto' && value === '') {\n                select.placeholder = name;\n              } else {\n                select.values.push({\n                  name: name,\n                  value: value,\n                  disabled: disabled\n                });\n              }\n            });\n\n            if (settings.placeholder && settings.placeholder !== 'auto') {\n              module.debug('Setting placeholder value to', settings.placeholder);\n              select.placeholder = settings.placeholder;\n            }\n\n            if (settings.sortSelect) {\n              select.values.sort(function (a, b) {\n                return a.name > b.name ? 1 : -1;\n              });\n              module.debug('Retrieved and sorted values from select', select);\n            } else {\n              module.debug('Retrieved values from select', select);\n            }\n\n            return select;\n          },\n          activeItem: function activeItem() {\n            return $item.filter('.' + className.active);\n          },\n          selectedItem: function selectedItem() {\n            var $selectedItem = $item.not(selector.unselectable).filter('.' + className.selected);\n            return $selectedItem.length > 0 ? $selectedItem : $item.eq(0);\n          },\n          itemWithAdditions: function itemWithAdditions(value) {\n            var $items = module.get.item(value),\n                $userItems = module.create.userChoice(value),\n                hasUserItems = $userItems && $userItems.length > 0;\n\n            if (hasUserItems) {\n              $items = $items.length > 0 ? $items.add($userItems) : $userItems;\n            }\n\n            return $items;\n          },\n          item: function item(value, strict) {\n            var $selectedItem = false,\n                shouldSearch,\n                isMultiple;\n            value = value !== undefined ? value : module.get.values() !== undefined ? module.get.values() : module.get.text();\n            shouldSearch = isMultiple ? value.length > 0 : value !== undefined && value !== null;\n            isMultiple = module.is.multiple() && $.isArray(value);\n            strict = value === '' || value === 0 ? true : strict || false;\n\n            if (shouldSearch) {\n              $item.each(function () {\n                var $choice = $(this),\n                    optionText = module.get.choiceText($choice),\n                    optionValue = module.get.choiceValue($choice, optionText); // safe early exit\n\n                if (optionValue === null || optionValue === undefined) {\n                  return;\n                }\n\n                if (isMultiple) {\n                  if ($.inArray(String(optionValue), value) !== -1 || $.inArray(optionText, value) !== -1) {\n                    $selectedItem = $selectedItem ? $selectedItem.add($choice) : $choice;\n                  }\n                } else if (strict) {\n                  module.verbose('Ambiguous dropdown value using strict type check', $choice, value);\n\n                  if (optionValue === value || optionText === value) {\n                    $selectedItem = $choice;\n                    return true;\n                  }\n                } else {\n                  if (String(optionValue) == String(value) || optionText == value) {\n                    module.verbose('Found select item by value', optionValue, value);\n                    $selectedItem = $choice;\n                    return true;\n                  }\n                }\n              });\n            }\n\n            return $selectedItem;\n          }\n        },\n        check: {\n          maxSelections: function maxSelections(selectionCount) {\n            if (settings.maxSelections) {\n              selectionCount = selectionCount !== undefined ? selectionCount : module.get.selectionCount();\n\n              if (selectionCount >= settings.maxSelections) {\n                module.debug('Maximum selection count reached');\n\n                if (settings.useLabels) {\n                  $item.addClass(className.filtered);\n                  module.add.message(message.maxSelections);\n                }\n\n                return true;\n              } else {\n                module.verbose('No longer at maximum selection count');\n                module.remove.message();\n                module.remove.filteredItem();\n\n                if (module.is.searchSelection()) {\n                  module.filterItems();\n                }\n\n                return false;\n              }\n            }\n\n            return true;\n          }\n        },\n        restore: {\n          defaults: function defaults() {\n            module.clear();\n            module.restore.defaultText();\n            module.restore.defaultValue();\n          },\n          defaultText: function defaultText() {\n            var defaultText = module.get.defaultText(),\n                placeholderText = module.get.placeholderText;\n\n            if (defaultText === placeholderText) {\n              module.debug('Restoring default placeholder text', defaultText);\n              module.set.placeholderText(defaultText);\n            } else {\n              module.debug('Restoring default text', defaultText);\n              module.set.text(defaultText);\n            }\n          },\n          placeholderText: function placeholderText() {\n            module.set.placeholderText();\n          },\n          defaultValue: function defaultValue() {\n            var defaultValue = module.get.defaultValue();\n\n            if (defaultValue !== undefined) {\n              module.debug('Restoring default value', defaultValue);\n\n              if (defaultValue !== '') {\n                module.set.value(defaultValue);\n                module.set.selected();\n              } else {\n                module.remove.activeItem();\n                module.remove.selectedItem();\n              }\n            }\n          },\n          labels: function labels() {\n            if (settings.allowAdditions) {\n              if (!settings.useLabels) {\n                module.error(error.labels);\n                settings.useLabels = true;\n              }\n\n              module.debug('Restoring selected values');\n              module.create.userLabels();\n            }\n\n            module.check.maxSelections();\n          },\n          selected: function selected() {\n            module.restore.values();\n\n            if (module.is.multiple()) {\n              module.debug('Restoring previously selected values and labels');\n              module.restore.labels();\n            } else {\n              module.debug('Restoring previously selected values');\n            }\n          },\n          values: function values() {\n            // prevents callbacks from occurring on initial load\n            module.set.initialLoad();\n\n            if (settings.apiSettings && settings.saveRemoteData && module.get.remoteValues()) {\n              module.restore.remoteValues();\n            } else {\n              module.set.selected();\n            }\n\n            module.remove.initialLoad();\n          },\n          remoteValues: function remoteValues() {\n            var values = module.get.remoteValues();\n            module.debug('Recreating selected from session data', values);\n\n            if (values) {\n              if (module.is.single()) {\n                $.each(values, function (value, name) {\n                  module.set.text(name);\n                });\n              } else {\n                $.each(values, function (value, name) {\n                  module.add.label(value, name);\n                });\n              }\n            }\n          }\n        },\n        read: {\n          remoteData: function remoteData(value) {\n            var name;\n\n            if (window.Storage === undefined) {\n              module.error(error.noStorage);\n              return;\n            }\n\n            name = sessionStorage.getItem(value);\n            return name !== undefined ? name : false;\n          }\n        },\n        save: {\n          defaults: function defaults() {\n            module.save.defaultText();\n            module.save.placeholderText();\n            module.save.defaultValue();\n          },\n          defaultValue: function defaultValue() {\n            var value = module.get.value();\n            module.verbose('Saving default value as', value);\n            $module.data(metadata.defaultValue, value);\n          },\n          defaultText: function defaultText() {\n            var text = module.get.text();\n            module.verbose('Saving default text as', text);\n            $module.data(metadata.defaultText, text);\n          },\n          placeholderText: function placeholderText() {\n            var text;\n\n            if (settings.placeholder !== false && $text.hasClass(className.placeholder)) {\n              text = module.get.text();\n              module.verbose('Saving placeholder text as', text);\n              $module.data(metadata.placeholderText, text);\n            }\n          },\n          remoteData: function remoteData(name, value) {\n            if (window.Storage === undefined) {\n              module.error(error.noStorage);\n              return;\n            }\n\n            module.verbose('Saving remote data to session storage', value, name);\n            sessionStorage.setItem(value, name);\n          }\n        },\n        clear: function clear() {\n          if (module.is.multiple() && settings.useLabels) {\n            module.remove.labels();\n          } else {\n            module.remove.activeItem();\n            module.remove.selectedItem();\n          }\n\n          module.set.placeholderText();\n          module.clearValue();\n        },\n        clearValue: function clearValue() {\n          module.set.value('');\n        },\n        scrollPage: function scrollPage(direction, $selectedItem) {\n          var $currentItem = $selectedItem || module.get.selectedItem(),\n              $menu = $currentItem.closest(selector.menu),\n              menuHeight = $menu.outerHeight(),\n              currentScroll = $menu.scrollTop(),\n              itemHeight = $item.eq(0).outerHeight(),\n              itemsPerPage = Math.floor(menuHeight / itemHeight),\n              maxScroll = $menu.prop('scrollHeight'),\n              newScroll = direction == 'up' ? currentScroll - itemHeight * itemsPerPage : currentScroll + itemHeight * itemsPerPage,\n              $selectableItem = $item.not(selector.unselectable),\n              isWithinRange,\n              $nextSelectedItem,\n              elementIndex;\n          elementIndex = direction == 'up' ? $selectableItem.index($currentItem) - itemsPerPage : $selectableItem.index($currentItem) + itemsPerPage;\n          isWithinRange = direction == 'up' ? elementIndex >= 0 : elementIndex < $selectableItem.length;\n          $nextSelectedItem = isWithinRange ? $selectableItem.eq(elementIndex) : direction == 'up' ? $selectableItem.first() : $selectableItem.last();\n\n          if ($nextSelectedItem.length > 0) {\n            module.debug('Scrolling page', direction, $nextSelectedItem);\n            $currentItem.removeClass(className.selected);\n            $nextSelectedItem.addClass(className.selected);\n\n            if (settings.selectOnKeydown && module.is.single()) {\n              module.set.selectedItem($nextSelectedItem);\n            }\n\n            $menu.scrollTop(newScroll);\n          }\n        },\n        set: {\n          filtered: function filtered() {\n            var isMultiple = module.is.multiple(),\n                isSearch = module.is.searchSelection(),\n                isSearchMultiple = isMultiple && isSearch,\n                searchValue = isSearch ? module.get.query() : '',\n                hasSearchValue = typeof searchValue === 'string' && searchValue.length > 0,\n                searchWidth = module.get.searchWidth(),\n                valueIsSet = searchValue !== '';\n\n            if (isMultiple && hasSearchValue) {\n              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);\n              $search.css('width', searchWidth);\n            }\n\n            if (hasSearchValue || isSearchMultiple && valueIsSet) {\n              module.verbose('Hiding placeholder text');\n              $text.addClass(className.filtered);\n            } else if (!isMultiple || isSearchMultiple && !valueIsSet) {\n              module.verbose('Showing placeholder text');\n              $text.removeClass(className.filtered);\n            }\n          },\n          empty: function empty() {\n            $module.addClass(className.empty);\n          },\n          loading: function loading() {\n            $module.addClass(className.loading);\n          },\n          placeholderText: function placeholderText(text) {\n            text = text || module.get.placeholderText();\n            module.debug('Setting placeholder text', text);\n            module.set.text(text);\n            $text.addClass(className.placeholder);\n          },\n          tabbable: function tabbable() {\n            if (module.is.searchSelection()) {\n              module.debug('Added tabindex to searchable dropdown');\n              $search.val('').attr('tabindex', 0);\n              $menu.attr('tabindex', -1);\n            } else {\n              module.debug('Added tabindex to dropdown');\n\n              if ($module.attr('tabindex') === undefined) {\n                $module.attr('tabindex', 0);\n                $menu.attr('tabindex', -1);\n              }\n            }\n          },\n          initialLoad: function initialLoad() {\n            module.verbose('Setting initial load');\n            _initialLoad = true;\n          },\n          activeItem: function activeItem($item) {\n            if (settings.allowAdditions && $item.filter(selector.addition).length > 0) {\n              $item.addClass(className.filtered);\n            } else {\n              $item.addClass(className.active);\n            }\n          },\n          partialSearch: function partialSearch(text) {\n            var length = module.get.query().length;\n            $search.val(text.substr(0, length));\n          },\n          scrollPosition: function scrollPosition($item, forceScroll) {\n            var edgeTolerance = 5,\n                $menu,\n                hasActive,\n                offset,\n                itemHeight,\n                itemOffset,\n                menuOffset,\n                menuScroll,\n                menuHeight,\n                abovePage,\n                belowPage;\n            $item = $item || module.get.selectedItem();\n            $menu = $item.closest(selector.menu);\n            hasActive = $item && $item.length > 0;\n            forceScroll = forceScroll !== undefined ? forceScroll : false;\n\n            if ($item && $menu.length > 0 && hasActive) {\n              itemOffset = $item.position().top;\n              $menu.addClass(className.loading);\n              menuScroll = $menu.scrollTop();\n              menuOffset = $menu.offset().top;\n              itemOffset = $item.offset().top;\n              offset = menuScroll - menuOffset + itemOffset;\n\n              if (!forceScroll) {\n                menuHeight = $menu.height();\n                belowPage = menuScroll + menuHeight < offset + edgeTolerance;\n                abovePage = offset - edgeTolerance < menuScroll;\n              }\n\n              module.debug('Scrolling to active item', offset);\n\n              if (forceScroll || abovePage || belowPage) {\n                $menu.scrollTop(offset);\n              }\n\n              $menu.removeClass(className.loading);\n            }\n          },\n          text: function text(_text) {\n            if (settings.action !== 'select') {\n              if (settings.action == 'combo') {\n                module.debug('Changing combo button text', _text, $combo);\n\n                if (settings.preserveHTML) {\n                  $combo.html(_text);\n                } else {\n                  $combo.text(_text);\n                }\n              } else {\n                if (_text !== module.get.placeholderText()) {\n                  $text.removeClass(className.placeholder);\n                }\n\n                module.debug('Changing text', _text, $text);\n                $text.removeClass(className.filtered);\n\n                if (settings.preserveHTML) {\n                  $text.html(_text);\n                } else {\n                  $text.text(_text);\n                }\n              }\n            }\n          },\n          selectedItem: function selectedItem($item) {\n            var value = module.get.choiceValue($item),\n                searchText = module.get.choiceText($item, false),\n                text = module.get.choiceText($item, true);\n            module.debug('Setting user selection to item', $item);\n            module.remove.activeItem();\n            module.set.partialSearch(searchText);\n            module.set.activeItem($item);\n            module.set.selected(value, $item);\n            module.set.text(text);\n          },\n          selectedLetter: function selectedLetter(letter) {\n            var $selectedItem = $item.filter('.' + className.selected),\n                alreadySelectedLetter = $selectedItem.length > 0 && module.has.firstLetter($selectedItem, letter),\n                $nextValue = false,\n                $nextItem; // check next of same letter\n\n            if (alreadySelectedLetter) {\n              $nextItem = $selectedItem.nextAll($item).eq(0);\n\n              if (module.has.firstLetter($nextItem, letter)) {\n                $nextValue = $nextItem;\n              }\n            } // check all values\n\n\n            if (!$nextValue) {\n              $item.each(function () {\n                if (module.has.firstLetter($(this), letter)) {\n                  $nextValue = $(this);\n                  return false;\n                }\n              });\n            } // set next value\n\n\n            if ($nextValue) {\n              module.verbose('Scrolling to next value with letter', letter);\n              module.set.scrollPosition($nextValue);\n              $selectedItem.removeClass(className.selected);\n              $nextValue.addClass(className.selected);\n\n              if (settings.selectOnKeydown && module.is.single()) {\n                module.set.selectedItem($nextValue);\n              }\n            }\n          },\n          direction: function direction($menu) {\n            if (settings.direction == 'auto') {\n              // reset position\n              module.remove.upward();\n\n              if (module.can.openDownward($menu)) {\n                module.remove.upward($menu);\n              } else {\n                module.set.upward($menu);\n              }\n\n              if (!module.is.leftward($menu) && !module.can.openRightward($menu)) {\n                module.set.leftward($menu);\n              }\n            } else if (settings.direction == 'upward') {\n              module.set.upward($menu);\n            }\n          },\n          upward: function upward($currentMenu) {\n            var $element = $currentMenu || $module;\n            $element.addClass(className.upward);\n          },\n          leftward: function leftward($currentMenu) {\n            var $element = $currentMenu || $menu;\n            $element.addClass(className.leftward);\n          },\n          value: function value(_value, text, $selected) {\n            var escapedValue = module.escape.value(_value),\n                hasInput = $input.length > 0,\n                currentValue = module.get.values(),\n                stringValue = _value !== undefined ? String(_value) : _value,\n                newValue;\n\n            if (hasInput) {\n              if (!settings.allowReselection && stringValue == currentValue) {\n                module.verbose('Skipping value update already same value', _value, currentValue);\n\n                if (!module.is.initialLoad()) {\n                  return;\n                }\n              }\n\n              if (module.is.single() && module.has.selectInput() && module.can.extendSelect()) {\n                module.debug('Adding user option', _value);\n                module.add.optionValue(_value);\n              }\n\n              module.debug('Updating input value', escapedValue, currentValue);\n              internalChange = true;\n              $input.val(escapedValue);\n\n              if (settings.fireOnInit === false && module.is.initialLoad()) {\n                module.debug('Input native change event ignored on initial load');\n              } else {\n                module.trigger.change();\n              }\n\n              internalChange = false;\n            } else {\n              module.verbose('Storing value in metadata', escapedValue, $input);\n\n              if (escapedValue !== currentValue) {\n                $module.data(metadata.value, stringValue);\n              }\n            }\n\n            if (module.is.single() && settings.clearable) {\n              // treat undefined or '' as empty\n              if (!escapedValue) {\n                module.remove.clearable();\n              } else {\n                module.set.clearable();\n              }\n            }\n\n            if (settings.fireOnInit === false && module.is.initialLoad()) {\n              module.verbose('No callback on initial load', settings.onChange);\n            } else {\n              settings.onChange.call(element, _value, text, $selected);\n            }\n          },\n          active: function active() {\n            $module.addClass(className.active);\n          },\n          multiple: function multiple() {\n            $module.addClass(className.multiple);\n          },\n          visible: function visible() {\n            $module.addClass(className.visible);\n          },\n          exactly: function exactly(value, $selectedItem) {\n            module.debug('Setting selected to exact values');\n            module.clear();\n            module.set.selected(value, $selectedItem);\n          },\n          selected: function selected(value, $selectedItem) {\n            var isMultiple = module.is.multiple(),\n                $userSelectedItem;\n            $selectedItem = settings.allowAdditions ? $selectedItem || module.get.itemWithAdditions(value) : $selectedItem || module.get.item(value);\n\n            if (!$selectedItem) {\n              return;\n            }\n\n            module.debug('Setting selected menu item to', $selectedItem);\n\n            if (module.is.multiple()) {\n              module.remove.searchWidth();\n            }\n\n            if (module.is.single()) {\n              module.remove.activeItem();\n              module.remove.selectedItem();\n            } else if (settings.useLabels) {\n              module.remove.selectedItem();\n            } // select each item\n\n\n            $selectedItem.each(function () {\n              var $selected = $(this),\n                  selectedText = module.get.choiceText($selected),\n                  selectedValue = module.get.choiceValue($selected, selectedText),\n                  isFiltered = $selected.hasClass(className.filtered),\n                  isActive = $selected.hasClass(className.active),\n                  isUserValue = $selected.hasClass(className.addition),\n                  shouldAnimate = isMultiple && $selectedItem.length == 1;\n\n              if (isMultiple) {\n                if (!isActive || isUserValue) {\n                  if (settings.apiSettings && settings.saveRemoteData) {\n                    module.save.remoteData(selectedText, selectedValue);\n                  }\n\n                  if (settings.useLabels) {\n                    module.add.label(selectedValue, selectedText, shouldAnimate);\n                    module.add.value(selectedValue, selectedText, $selected);\n                    module.set.activeItem($selected);\n                    module.filterActive();\n                    module.select.nextAvailable($selectedItem);\n                  } else {\n                    module.add.value(selectedValue, selectedText, $selected);\n                    module.set.text(module.add.variables(message.count));\n                    module.set.activeItem($selected);\n                  }\n                } else if (!isFiltered) {\n                  module.debug('Selected active value, removing label');\n                  module.remove.selected(selectedValue);\n                }\n              } else {\n                if (settings.apiSettings && settings.saveRemoteData) {\n                  module.save.remoteData(selectedText, selectedValue);\n                }\n\n                module.set.text(selectedText);\n                module.set.value(selectedValue, selectedText, $selected);\n                $selected.addClass(className.active).addClass(className.selected);\n              }\n            });\n          },\n          clearable: function clearable() {\n            $icon.addClass(className.clear);\n          }\n        },\n        add: {\n          label: function label(value, text, shouldAnimate) {\n            var $next = module.is.searchSelection() ? $search : $text,\n                escapedValue = module.escape.value(value),\n                $label;\n\n            if (settings.ignoreCase) {\n              escapedValue = escapedValue.toLowerCase();\n            }\n\n            $label = $('<a />').addClass(className.label).attr('data-' + metadata.value, escapedValue).html(templates.label(escapedValue, text));\n            $label = settings.onLabelCreate.call($label, escapedValue, text);\n\n            if (module.has.label(value)) {\n              module.debug('User selection already exists, skipping', escapedValue);\n              return;\n            }\n\n            if (settings.label.variation) {\n              $label.addClass(settings.label.variation);\n            }\n\n            if (shouldAnimate === true) {\n              module.debug('Animating in label', $label);\n              $label.addClass(className.hidden).insertBefore($next).transition(settings.label.transition, settings.label.duration);\n            } else {\n              module.debug('Adding selection label', $label);\n              $label.insertBefore($next);\n            }\n          },\n          message: function message(_message) {\n            var $message = $menu.children(selector.message),\n                html = settings.templates.message(module.add.variables(_message));\n\n            if ($message.length > 0) {\n              $message.html(html);\n            } else {\n              $message = $('<div/>').html(html).addClass(className.message).appendTo($menu);\n            }\n          },\n          optionValue: function optionValue(value) {\n            var escapedValue = module.escape.value(value),\n                $option = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n                hasOption = $option.length > 0;\n\n            if (hasOption) {\n              return;\n            } // temporarily disconnect observer\n\n\n            module.disconnect.selectObserver();\n\n            if (module.is.single()) {\n              module.verbose('Removing previous user addition');\n              $input.find('option.' + className.addition).remove();\n            }\n\n            $('<option/>').prop('value', escapedValue).addClass(className.addition).html(value).appendTo($input);\n            module.verbose('Adding user addition as an <option>', value);\n            module.observe.select();\n          },\n          userSuggestion: function userSuggestion(value) {\n            var $addition = $menu.children(selector.addition),\n                $existingItem = module.get.item(value),\n                alreadyHasValue = $existingItem && $existingItem.not(selector.addition).length,\n                hasUserSuggestion = $addition.length > 0,\n                html;\n\n            if (settings.useLabels && module.has.maxSelections()) {\n              return;\n            }\n\n            if (value === '' || alreadyHasValue) {\n              $addition.remove();\n              return;\n            }\n\n            if (hasUserSuggestion) {\n              $addition.data(metadata.value, value).data(metadata.text, value).attr('data-' + metadata.value, value).attr('data-' + metadata.text, value).removeClass(className.filtered);\n\n              if (!settings.hideAdditions) {\n                html = settings.templates.addition(module.add.variables(message.addResult, value));\n                $addition.html(html);\n              }\n\n              module.verbose('Replacing user suggestion with new value', $addition);\n            } else {\n              $addition = module.create.userChoice(value);\n              $addition.prependTo($menu);\n              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);\n            }\n\n            if (!settings.hideAdditions || module.is.allFiltered()) {\n              $addition.addClass(className.selected).siblings().removeClass(className.selected);\n            }\n\n            module.refreshItems();\n          },\n          variables: function variables(message, term) {\n            var hasCount = message.search('{count}') !== -1,\n                hasMaxCount = message.search('{maxCount}') !== -1,\n                hasTerm = message.search('{term}') !== -1,\n                values,\n                count,\n                query;\n            module.verbose('Adding templated variables to message', message);\n\n            if (hasCount) {\n              count = module.get.selectionCount();\n              message = message.replace('{count}', count);\n            }\n\n            if (hasMaxCount) {\n              count = module.get.selectionCount();\n              message = message.replace('{maxCount}', settings.maxSelections);\n            }\n\n            if (hasTerm) {\n              query = term || module.get.query();\n              message = message.replace('{term}', query);\n            }\n\n            return message;\n          },\n          value: function value(addedValue, addedText, $selectedItem) {\n            var currentValue = module.get.values(),\n                newValue;\n\n            if (module.has.value(addedValue)) {\n              module.debug('Value already selected');\n              return;\n            }\n\n            if (addedValue === '') {\n              module.debug('Cannot select blank values from multiselect');\n              return;\n            } // extend current array\n\n\n            if ($.isArray(currentValue)) {\n              newValue = currentValue.concat([addedValue]);\n              newValue = module.get.uniqueArray(newValue);\n            } else {\n              newValue = [addedValue];\n            } // add values\n\n\n            if (module.has.selectInput()) {\n              if (module.can.extendSelect()) {\n                module.debug('Adding value to select', addedValue, newValue, $input);\n                module.add.optionValue(addedValue);\n              }\n            } else {\n              newValue = newValue.join(settings.delimiter);\n              module.debug('Setting hidden input to delimited value', newValue, $input);\n            }\n\n            if (settings.fireOnInit === false && module.is.initialLoad()) {\n              module.verbose('Skipping onadd callback on initial load', settings.onAdd);\n            } else {\n              settings.onAdd.call(element, addedValue, addedText, $selectedItem);\n            }\n\n            module.set.value(newValue, addedValue, addedText, $selectedItem);\n            module.check.maxSelections();\n          }\n        },\n        remove: {\n          active: function active() {\n            $module.removeClass(className.active);\n          },\n          activeLabel: function activeLabel() {\n            $module.find(selector.label).removeClass(className.active);\n          },\n          empty: function empty() {\n            $module.removeClass(className.empty);\n          },\n          loading: function loading() {\n            $module.removeClass(className.loading);\n          },\n          initialLoad: function initialLoad() {\n            _initialLoad = false;\n          },\n          upward: function upward($currentMenu) {\n            var $element = $currentMenu || $module;\n            $element.removeClass(className.upward);\n          },\n          leftward: function leftward($currentMenu) {\n            var $element = $currentMenu || $menu;\n            $element.removeClass(className.leftward);\n          },\n          visible: function visible() {\n            $module.removeClass(className.visible);\n          },\n          activeItem: function activeItem() {\n            $item.removeClass(className.active);\n          },\n          filteredItem: function filteredItem() {\n            if (settings.useLabels && module.has.maxSelections()) {\n              return;\n            }\n\n            if (settings.useLabels && module.is.multiple()) {\n              $item.not('.' + className.active).removeClass(className.filtered);\n            } else {\n              $item.removeClass(className.filtered);\n            }\n\n            module.remove.empty();\n          },\n          optionValue: function optionValue(value) {\n            var escapedValue = module.escape.value(value),\n                $option = $input.find('option[value=\"' + module.escape.string(escapedValue) + '\"]'),\n                hasOption = $option.length > 0;\n\n            if (!hasOption || !$option.hasClass(className.addition)) {\n              return;\n            } // temporarily disconnect observer\n\n\n            if (_selectObserver) {\n              _selectObserver.disconnect();\n\n              module.verbose('Temporarily disconnecting mutation observer');\n            }\n\n            $option.remove();\n            module.verbose('Removing user addition as an <option>', escapedValue);\n\n            if (_selectObserver) {\n              _selectObserver.observe($input[0], {\n                childList: true,\n                subtree: true\n              });\n            }\n          },\n          message: function message() {\n            $menu.children(selector.message).remove();\n          },\n          searchWidth: function searchWidth() {\n            $search.css('width', '');\n          },\n          searchTerm: function searchTerm() {\n            module.verbose('Cleared search term');\n            $search.val('');\n            module.set.filtered();\n          },\n          userAddition: function userAddition() {\n            $item.filter(selector.addition).remove();\n          },\n          selected: function selected(value, $selectedItem) {\n            $selectedItem = settings.allowAdditions ? $selectedItem || module.get.itemWithAdditions(value) : $selectedItem || module.get.item(value);\n\n            if (!$selectedItem) {\n              return false;\n            }\n\n            $selectedItem.each(function () {\n              var $selected = $(this),\n                  selectedText = module.get.choiceText($selected),\n                  selectedValue = module.get.choiceValue($selected, selectedText);\n\n              if (module.is.multiple()) {\n                if (settings.useLabels) {\n                  module.remove.value(selectedValue, selectedText, $selected);\n                  module.remove.label(selectedValue);\n                } else {\n                  module.remove.value(selectedValue, selectedText, $selected);\n\n                  if (module.get.selectionCount() === 0) {\n                    module.set.placeholderText();\n                  } else {\n                    module.set.text(module.add.variables(message.count));\n                  }\n                }\n              } else {\n                module.remove.value(selectedValue, selectedText, $selected);\n              }\n\n              $selected.removeClass(className.filtered).removeClass(className.active);\n\n              if (settings.useLabels) {\n                $selected.removeClass(className.selected);\n              }\n            });\n          },\n          selectedItem: function selectedItem() {\n            $item.removeClass(className.selected);\n          },\n          value: function value(removedValue, removedText, $removedItem) {\n            var values = module.get.values(),\n                newValue;\n\n            if (module.has.selectInput()) {\n              module.verbose('Input is <select> removing selected option', removedValue);\n              newValue = module.remove.arrayValue(removedValue, values);\n              module.remove.optionValue(removedValue);\n            } else {\n              module.verbose('Removing from delimited values', removedValue);\n              newValue = module.remove.arrayValue(removedValue, values);\n              newValue = newValue.join(settings.delimiter);\n            }\n\n            if (settings.fireOnInit === false && module.is.initialLoad()) {\n              module.verbose('No callback on initial load', settings.onRemove);\n            } else {\n              settings.onRemove.call(element, removedValue, removedText, $removedItem);\n            }\n\n            module.set.value(newValue, removedText, $removedItem);\n            module.check.maxSelections();\n          },\n          arrayValue: function arrayValue(removedValue, values) {\n            if (!$.isArray(values)) {\n              values = [values];\n            }\n\n            values = $.grep(values, function (value) {\n              return removedValue != value;\n            });\n            module.verbose('Removed value from delimited string', removedValue, values);\n            return values;\n          },\n          label: function label(value, shouldAnimate) {\n            var $labels = $module.find(selector.label),\n                $removedLabel = $labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(value) + '\"]');\n            module.verbose('Removing label', $removedLabel);\n            $removedLabel.remove();\n          },\n          activeLabels: function activeLabels($activeLabels) {\n            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);\n            module.verbose('Removing active label selections', $activeLabels);\n            module.remove.labels($activeLabels);\n          },\n          labels: function labels($labels) {\n            $labels = $labels || $module.find(selector.label);\n            module.verbose('Removing labels', $labels);\n            $labels.each(function () {\n              var $label = $(this),\n                  value = $label.data(metadata.value),\n                  stringValue = value !== undefined ? String(value) : value,\n                  isUserValue = module.is.userValue(stringValue);\n\n              if (settings.onLabelRemove.call($label, value) === false) {\n                module.debug('Label remove callback cancelled removal');\n                return;\n              }\n\n              module.remove.message();\n\n              if (isUserValue) {\n                module.remove.value(stringValue);\n                module.remove.label(stringValue);\n              } else {\n                // selected will also remove label\n                module.remove.selected(stringValue);\n              }\n            });\n          },\n          tabbable: function tabbable() {\n            if (module.is.searchSelection()) {\n              module.debug('Searchable dropdown initialized');\n              $search.removeAttr('tabindex');\n              $menu.removeAttr('tabindex');\n            } else {\n              module.debug('Simple selection dropdown initialized');\n              $module.removeAttr('tabindex');\n              $menu.removeAttr('tabindex');\n            }\n          },\n          clearable: function clearable() {\n            $icon.removeClass(className.clear);\n          }\n        },\n        has: {\n          menuSearch: function menuSearch() {\n            return module.has.search() && $search.closest($menu).length > 0;\n          },\n          search: function search() {\n            return $search.length > 0;\n          },\n          sizer: function sizer() {\n            return $sizer.length > 0;\n          },\n          selectInput: function selectInput() {\n            return $input.is('select');\n          },\n          minCharacters: function minCharacters(searchTerm) {\n            if (settings.minCharacters) {\n              searchTerm = searchTerm !== undefined ? String(searchTerm) : String(module.get.query());\n              return searchTerm.length >= settings.minCharacters;\n            }\n\n            return true;\n          },\n          firstLetter: function firstLetter($item, letter) {\n            var text, firstLetter;\n\n            if (!$item || $item.length === 0 || typeof letter !== 'string') {\n              return false;\n            }\n\n            text = module.get.choiceText($item, false);\n            letter = letter.toLowerCase();\n            firstLetter = String(text).charAt(0).toLowerCase();\n            return letter == firstLetter;\n          },\n          input: function input() {\n            return $input.length > 0;\n          },\n          items: function items() {\n            return $item.length > 0;\n          },\n          menu: function menu() {\n            return $menu.length > 0;\n          },\n          message: function message() {\n            return $menu.children(selector.message).length !== 0;\n          },\n          label: function label(value) {\n            var escapedValue = module.escape.value(value),\n                $labels = $module.find(selector.label);\n\n            if (settings.ignoreCase) {\n              escapedValue = escapedValue.toLowerCase();\n            }\n\n            return $labels.filter('[data-' + metadata.value + '=\"' + module.escape.string(escapedValue) + '\"]').length > 0;\n          },\n          maxSelections: function maxSelections() {\n            return settings.maxSelections && module.get.selectionCount() >= settings.maxSelections;\n          },\n          allResultsFiltered: function allResultsFiltered() {\n            var $normalResults = $item.not(selector.addition);\n            return $normalResults.filter(selector.unselectable).length === $normalResults.length;\n          },\n          userSuggestion: function userSuggestion() {\n            return $menu.children(selector.addition).length > 0;\n          },\n          query: function query() {\n            return module.get.query() !== '';\n          },\n          value: function value(_value2) {\n            return settings.ignoreCase ? module.has.valueIgnoringCase(_value2) : module.has.valueMatchingCase(_value2);\n          },\n          valueMatchingCase: function valueMatchingCase(value) {\n            var values = module.get.values(),\n                hasValue = $.isArray(values) ? values && $.inArray(value, values) !== -1 : values == value;\n            return hasValue ? true : false;\n          },\n          valueIgnoringCase: function valueIgnoringCase(value) {\n            var values = module.get.values(),\n                hasValue = false;\n\n            if (!$.isArray(values)) {\n              values = [values];\n            }\n\n            $.each(values, function (index, existingValue) {\n              if (String(value).toLowerCase() == String(existingValue).toLowerCase()) {\n                hasValue = true;\n                return false;\n              }\n            });\n            return hasValue;\n          }\n        },\n        is: {\n          active: function active() {\n            return $module.hasClass(className.active);\n          },\n          animatingInward: function animatingInward() {\n            return $menu.transition('is inward');\n          },\n          animatingOutward: function animatingOutward() {\n            return $menu.transition('is outward');\n          },\n          bubbledLabelClick: function bubbledLabelClick(event) {\n            return $(event.target).is('select, input') && $module.closest('label').length > 0;\n          },\n          bubbledIconClick: function bubbledIconClick(event) {\n            return $(event.target).closest($icon).length > 0;\n          },\n          alreadySetup: function alreadySetup() {\n            return $module.is('select') && $module.parent(selector.dropdown).data(moduleNamespace) !== undefined && $module.prev().length === 0;\n          },\n          animating: function animating($subMenu) {\n            return $subMenu ? $subMenu.transition && $subMenu.transition('is animating') : $menu.transition && $menu.transition('is animating');\n          },\n          leftward: function leftward($subMenu) {\n            var $selectedMenu = $subMenu || $menu;\n            return $selectedMenu.hasClass(className.leftward);\n          },\n          disabled: function disabled() {\n            return $module.hasClass(className.disabled);\n          },\n          focused: function focused() {\n            return document.activeElement === $module[0];\n          },\n          focusedOnSearch: function focusedOnSearch() {\n            return document.activeElement === $search[0];\n          },\n          allFiltered: function allFiltered() {\n            return (module.is.multiple() || module.has.search()) && !(settings.hideAdditions == false && module.has.userSuggestion()) && !module.has.message() && module.has.allResultsFiltered();\n          },\n          hidden: function hidden($subMenu) {\n            return !module.is.visible($subMenu);\n          },\n          initialLoad: function initialLoad() {\n            return _initialLoad;\n          },\n          inObject: function inObject(needle, object) {\n            var found = false;\n            $.each(object, function (index, property) {\n              if (property == needle) {\n                found = true;\n                return true;\n              }\n            });\n            return found;\n          },\n          multiple: function multiple() {\n            return $module.hasClass(className.multiple);\n          },\n          remote: function remote() {\n            return settings.apiSettings && module.can.useAPI();\n          },\n          single: function single() {\n            return !module.is.multiple();\n          },\n          selectMutation: function selectMutation(mutations) {\n            var selectChanged = false;\n            $.each(mutations, function (index, mutation) {\n              if (mutation.target && $(mutation.target).is('select')) {\n                selectChanged = true;\n                return true;\n              }\n            });\n            return selectChanged;\n          },\n          search: function search() {\n            return $module.hasClass(className.search);\n          },\n          searchSelection: function searchSelection() {\n            return module.has.search() && $search.parent(selector.dropdown).length === 1;\n          },\n          selection: function selection() {\n            return $module.hasClass(className.selection);\n          },\n          userValue: function userValue(value) {\n            return $.inArray(value, module.get.userValues()) !== -1;\n          },\n          upward: function upward($menu) {\n            var $element = $menu || $module;\n            return $element.hasClass(className.upward);\n          },\n          visible: function visible($subMenu) {\n            return $subMenu ? $subMenu.hasClass(className.visible) : $menu.hasClass(className.visible);\n          },\n          verticallyScrollableContext: function verticallyScrollableContext() {\n            var overflowY = $context.get(0) !== window ? $context.css('overflow-y') : false;\n            return overflowY == 'auto' || overflowY == 'scroll';\n          },\n          horizontallyScrollableContext: function horizontallyScrollableContext() {\n            var overflowX = $context.get(0) !== window ? $context.css('overflow-X') : false;\n            return overflowX == 'auto' || overflowX == 'scroll';\n          }\n        },\n        can: {\n          activate: function activate($item) {\n            if (settings.useLabels) {\n              return true;\n            }\n\n            if (!module.has.maxSelections()) {\n              return true;\n            }\n\n            if (module.has.maxSelections() && $item.hasClass(className.active)) {\n              return true;\n            }\n\n            return false;\n          },\n          openDownward: function openDownward($subMenu) {\n            var $currentMenu = $subMenu || $menu,\n                canOpenDownward = true,\n                onScreen = {},\n                calculations;\n            $currentMenu.addClass(className.loading);\n            calculations = {\n              context: {\n                offset: $context.get(0) === window ? {\n                  top: 0,\n                  left: 0\n                } : $context.offset(),\n                scrollTop: $context.scrollTop(),\n                height: $context.outerHeight()\n              },\n              menu: {\n                offset: $currentMenu.offset(),\n                height: $currentMenu.outerHeight()\n              }\n            };\n\n            if (module.is.verticallyScrollableContext()) {\n              calculations.menu.offset.top += calculations.context.scrollTop;\n            }\n\n            onScreen = {\n              above: calculations.context.scrollTop <= calculations.menu.offset.top - calculations.context.offset.top - calculations.menu.height,\n              below: calculations.context.scrollTop + calculations.context.height >= calculations.menu.offset.top - calculations.context.offset.top + calculations.menu.height\n            };\n\n            if (onScreen.below) {\n              module.verbose('Dropdown can fit in context downward', onScreen);\n              canOpenDownward = true;\n            } else if (!onScreen.below && !onScreen.above) {\n              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);\n              canOpenDownward = true;\n            } else {\n              module.verbose('Dropdown cannot fit below, opening upward', onScreen);\n              canOpenDownward = false;\n            }\n\n            $currentMenu.removeClass(className.loading);\n            return canOpenDownward;\n          },\n          openRightward: function openRightward($subMenu) {\n            var $currentMenu = $subMenu || $menu,\n                canOpenRightward = true,\n                isOffscreenRight = false,\n                calculations;\n            $currentMenu.addClass(className.loading);\n            calculations = {\n              context: {\n                offset: $context.get(0) === window ? {\n                  top: 0,\n                  left: 0\n                } : $context.offset(),\n                scrollLeft: $context.scrollLeft(),\n                width: $context.outerWidth()\n              },\n              menu: {\n                offset: $currentMenu.offset(),\n                width: $currentMenu.outerWidth()\n              }\n            };\n\n            if (module.is.horizontallyScrollableContext()) {\n              calculations.menu.offset.left += calculations.context.scrollLeft;\n            }\n\n            isOffscreenRight = calculations.menu.offset.left - calculations.context.offset.left + calculations.menu.width >= calculations.context.scrollLeft + calculations.context.width;\n\n            if (isOffscreenRight) {\n              module.verbose('Dropdown cannot fit in context rightward', isOffscreenRight);\n              canOpenRightward = false;\n            }\n\n            $currentMenu.removeClass(className.loading);\n            return canOpenRightward;\n          },\n          click: function click() {\n            return hasTouch || settings.on == 'click';\n          },\n          extendSelect: function extendSelect() {\n            return settings.allowAdditions || settings.apiSettings;\n          },\n          show: function show() {\n            return !module.is.disabled() && (module.has.items() || module.has.message());\n          },\n          useAPI: function useAPI() {\n            return $.fn.api !== undefined;\n          }\n        },\n        animate: {\n          show: function show(callback, $subMenu) {\n            var $currentMenu = $subMenu || $menu,\n                start = $subMenu ? function () {} : function () {\n              module.hideSubMenus();\n              module.hideOthers();\n              module.set.active();\n            },\n                transition;\n            callback = $.isFunction(callback) ? callback : function () {};\n            module.verbose('Doing menu show animation', $currentMenu);\n            module.set.direction($subMenu);\n            transition = module.get.transition($subMenu);\n\n            if (module.is.selection()) {\n              module.set.scrollPosition(module.get.selectedItem(), true);\n            }\n\n            if (module.is.hidden($currentMenu) || module.is.animating($currentMenu)) {\n              if (transition == 'none') {\n                start();\n                $currentMenu.transition('show');\n                callback.call(element);\n              } else if ($.fn.transition !== undefined && $module.transition('is supported')) {\n                $currentMenu.transition({\n                  animation: transition + ' in',\n                  debug: settings.debug,\n                  verbose: settings.verbose,\n                  duration: settings.duration,\n                  queue: true,\n                  onStart: start,\n                  onComplete: function onComplete() {\n                    callback.call(element);\n                  }\n                });\n              } else {\n                module.error(error.noTransition, transition);\n              }\n            }\n          },\n          hide: function hide(callback, $subMenu) {\n            var $currentMenu = $subMenu || $menu,\n                duration = $subMenu ? settings.duration * 0.9 : settings.duration,\n                start = $subMenu ? function () {} : function () {\n              if (module.can.click()) {\n                module.unbind.intent();\n              }\n\n              module.remove.active();\n            },\n                transition = module.get.transition($subMenu);\n            callback = $.isFunction(callback) ? callback : function () {};\n\n            if (module.is.visible($currentMenu) || module.is.animating($currentMenu)) {\n              module.verbose('Doing menu hide animation', $currentMenu);\n\n              if (transition == 'none') {\n                start();\n                $currentMenu.transition('hide');\n                callback.call(element);\n              } else if ($.fn.transition !== undefined && $module.transition('is supported')) {\n                $currentMenu.transition({\n                  animation: transition + ' out',\n                  duration: settings.duration,\n                  debug: settings.debug,\n                  verbose: settings.verbose,\n                  queue: false,\n                  onStart: start,\n                  onComplete: function onComplete() {\n                    callback.call(element);\n                  }\n                });\n              } else {\n                module.error(error.transition);\n              }\n            }\n          }\n        },\n        hideAndClear: function hideAndClear() {\n          module.remove.searchTerm();\n\n          if (module.has.maxSelections()) {\n            return;\n          }\n\n          if (module.has.search()) {\n            module.hide(function () {\n              module.remove.filteredItem();\n            });\n          } else {\n            module.hide();\n          }\n        },\n        delay: {\n          show: function show() {\n            module.verbose('Delaying show event to ensure user intent');\n            clearTimeout(module.timer);\n            module.timer = setTimeout(module.show, settings.delay.show);\n          },\n          hide: function hide() {\n            module.verbose('Delaying hide event to ensure user intent');\n            clearTimeout(module.timer);\n            module.timer = setTimeout(module.hide, settings.delay.hide);\n          }\n        },\n        escape: {\n          value: function value(_value3) {\n            var multipleValues = $.isArray(_value3),\n                stringValue = typeof _value3 === 'string',\n                isUnparsable = !stringValue && !multipleValues,\n                hasQuotes = stringValue && _value3.search(regExp.quote) !== -1,\n                values = [];\n\n            if (isUnparsable || !hasQuotes) {\n              return _value3;\n            }\n\n            module.debug('Encoding quote values for use in select', _value3);\n\n            if (multipleValues) {\n              $.each(_value3, function (index, value) {\n                values.push(value.replace(regExp.quote, '&quot;'));\n              });\n              return values;\n            }\n\n            return _value3.replace(regExp.quote, '&quot;');\n          },\n          string: function string(text) {\n            text = String(text);\n            return text.replace(regExp.escape, '\\\\$&');\n          }\n        },\n        setting: function setting(name, value) {\n          module.debug('Changing setting', name, value);\n\n          if ($.isPlainObject(name)) {\n            $.extend(true, settings, name);\n          } else if (value !== undefined) {\n            if ($.isPlainObject(settings[name])) {\n              $.extend(true, settings[name], value);\n            } else {\n              settings[name] = value;\n            }\n          } else {\n            return settings[name];\n          }\n        },\n        internal: function internal(name, value) {\n          if ($.isPlainObject(name)) {\n            $.extend(true, module, name);\n          } else if (value !== undefined) {\n            module[name] = value;\n          } else {\n            return module[name];\n          }\n        },\n        debug: function debug() {\n          if (!settings.silent && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.debug.apply(console, arguments);\n            }\n          }\n        },\n        verbose: function verbose() {\n          if (!settings.silent && settings.verbose && settings.debug) {\n            if (settings.performance) {\n              module.performance.log(arguments);\n            } else {\n              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');\n              module.verbose.apply(console, arguments);\n            }\n          }\n        },\n        error: function error() {\n          if (!settings.silent) {\n            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');\n            module.error.apply(console, arguments);\n          }\n        },\n        performance: {\n          log: function log(message) {\n            var currentTime, executionTime, previousTime;\n\n            if (settings.performance) {\n              currentTime = new Date().getTime();\n              previousTime = time || currentTime;\n              executionTime = currentTime - previousTime;\n              time = currentTime;\n              performance.push({\n                'Name': message[0],\n                'Arguments': [].slice.call(message, 1) || '',\n                'Element': element,\n                'Execution Time': executionTime\n              });\n            }\n\n            clearTimeout(module.performance.timer);\n            module.performance.timer = setTimeout(module.performance.display, 500);\n          },\n          display: function display() {\n            var title = settings.name + ':',\n                totalTime = 0;\n            time = false;\n            clearTimeout(module.performance.timer);\n            $.each(performance, function (index, data) {\n              totalTime += data['Execution Time'];\n            });\n            title += ' ' + totalTime + 'ms';\n\n            if (moduleSelector) {\n              title += ' \\'' + moduleSelector + '\\'';\n            }\n\n            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {\n              console.groupCollapsed(title);\n\n              if (console.table) {\n                console.table(performance);\n              } else {\n                $.each(performance, function (index, data) {\n                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');\n                });\n              }\n\n              console.groupEnd();\n            }\n\n            performance = [];\n          }\n        },\n        invoke: function invoke(query, passedArguments, context) {\n          var object = instance,\n              maxDepth,\n              found,\n              response;\n          passedArguments = passedArguments || queryArguments;\n          context = element || context;\n\n          if (typeof query == 'string' && object !== undefined) {\n            query = query.split(/[\\. ]/);\n            maxDepth = query.length - 1;\n            $.each(query, function (depth, value) {\n              var camelCaseValue = depth != maxDepth ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1) : query;\n\n              if ($.isPlainObject(object[camelCaseValue]) && depth != maxDepth) {\n                object = object[camelCaseValue];\n              } else if (object[camelCaseValue] !== undefined) {\n                found = object[camelCaseValue];\n                return false;\n              } else if ($.isPlainObject(object[value]) && depth != maxDepth) {\n                object = object[value];\n              } else if (object[value] !== undefined) {\n                found = object[value];\n                return false;\n              } else {\n                module.error(error.method, query);\n                return false;\n              }\n            });\n          }\n\n          if ($.isFunction(found)) {\n            response = found.apply(context, passedArguments);\n          } else if (found !== undefined) {\n            response = found;\n          }\n\n          if ($.isArray(returnedValue)) {\n            returnedValue.push(response);\n          } else if (returnedValue !== undefined) {\n            returnedValue = [returnedValue, response];\n          } else if (response !== undefined) {\n            returnedValue = response;\n          }\n\n          return found;\n        }\n      };\n\n      if (methodInvoked) {\n        if (instance === undefined) {\n          module.initialize();\n        }\n\n        module.invoke(query);\n      } else {\n        if (instance !== undefined) {\n          instance.invoke('destroy');\n        }\n\n        module.initialize();\n      }\n    });\n    return returnedValue !== undefined ? returnedValue : $allModules;\n  };\n\n  _module.exports.settings = {\n    silent: false,\n    debug: false,\n    verbose: false,\n    performance: true,\n    on: 'click',\n    // what event should show menu action on item selection\n    action: 'activate',\n    // action on item selection (nothing, activate, select, combo, hide, function(){})\n    values: false,\n    // specify values to use for dropdown\n    clearable: false,\n    // whether the value of the dropdown can be cleared\n    apiSettings: false,\n    selectOnKeydown: true,\n    // Whether selection should occur automatically when keyboard shortcuts used\n    minCharacters: 0,\n    // Minimum characters required to trigger API call\n    filterRemoteData: false,\n    // Whether API results should be filtered after being returned for query term\n    saveRemoteData: true,\n    // Whether remote name/value pairs should be stored in sessionStorage to allow remote data to be restored on page refresh\n    throttle: 200,\n    // How long to wait after last user input to search remotely\n    context: window,\n    // Context to use when determining if on screen\n    direction: 'auto',\n    // Whether dropdown should always open in one direction\n    keepOnScreen: true,\n    // Whether dropdown should check whether it is on screen before showing\n    match: 'both',\n    // what to match against with search selection (both, text, or label)\n    fullTextSearch: false,\n    // search anywhere in value (set to 'exact' to require exact matches)\n    placeholder: 'auto',\n    // whether to convert blank <select> values to placeholder text\n    preserveHTML: true,\n    // preserve html when selecting value\n    sortSelect: false,\n    // sort selection on init\n    forceSelection: true,\n    // force a choice on blur with search selection\n    allowAdditions: false,\n    // whether multiple select should allow user added values\n    ignoreCase: false,\n    // whether to consider values not matching in case to be the same\n    hideAdditions: true,\n    // whether or not to hide special message prompting a user they can enter a value\n    maxSelections: false,\n    // When set to a number limits the number of selections to this count\n    useLabels: true,\n    // whether multiple select should filter currently active selections from choices\n    delimiter: ',',\n    // when multiselect uses normal <input> the values will be delimited with this character\n    showOnFocus: true,\n    // show menu on focus\n    allowReselection: false,\n    // whether current value should trigger callbacks when reselected\n    allowTab: true,\n    // add tabindex to element\n    allowCategorySelection: false,\n    // allow elements with sub-menus to be selected\n    fireOnInit: false,\n    // Whether callbacks should fire when initializing dropdown values\n    transition: 'auto',\n    // auto transition will slide down or up based on direction\n    duration: 200,\n    // duration of transition\n    glyphWidth: 1.037,\n    // widest glyph width in em (W is 1.037 em) used to calculate multiselect input width\n    // label settings on multi-select\n    label: {\n      transition: 'scale',\n      duration: 200,\n      variation: false\n    },\n    // delay before event\n    delay: {\n      hide: 300,\n      show: 200,\n      search: 20,\n      touch: 50\n    },\n\n    /* Callbacks */\n    onChange: function onChange(value, text, $selected) {},\n    onAdd: function onAdd(value, text, $selected) {},\n    onRemove: function onRemove(value, text, $selected) {},\n    onLabelSelect: function onLabelSelect($selectedLabels) {},\n    onLabelCreate: function onLabelCreate(value, text) {\n      return $(this);\n    },\n    onLabelRemove: function onLabelRemove(value) {\n      return true;\n    },\n    onNoResults: function onNoResults(searchTerm) {\n      return true;\n    },\n    onShow: function onShow() {},\n    onHide: function onHide() {},\n\n    /* Component */\n    name: 'Dropdown',\n    namespace: 'dropdown',\n    message: {\n      addResult: 'Add <b>{term}</b>',\n      count: '{count} selected',\n      maxSelections: 'Max {maxCount} selections',\n      noResults: 'No results found.',\n      serverError: 'There was an error contacting the server'\n    },\n    error: {\n      action: 'You called a dropdown action that was not defined',\n      alreadySetup: 'Once a select has been initialized behaviors must be called on the created ui dropdown',\n      labels: 'Allowing user additions currently requires the use of labels.',\n      missingMultiple: '<select> requires multiple property to be set to correctly preserve multiple values',\n      method: 'The method you called is not defined.',\n      noAPI: 'The API module is required to load resources remotely',\n      noStorage: 'Saving remote data requires session storage',\n      noTransition: 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>'\n    },\n    regExp: {\n      escape: /[-[\\]{}()*+?.,\\\\^$|#\\s]/g,\n      quote: /\"/g\n    },\n    metadata: {\n      defaultText: 'defaultText',\n      defaultValue: 'defaultValue',\n      placeholderText: 'placeholder',\n      text: 'text',\n      value: 'value'\n    },\n    // property names for remote query\n    fields: {\n      remoteValues: 'results',\n      // grouping for api results\n      values: 'values',\n      // grouping for all dropdown values\n      disabled: 'disabled',\n      // whether value should be disabled\n      name: 'name',\n      // displayed dropdown text\n      value: 'value',\n      // actual dropdown value\n      text: 'text' // displayed text when selected\n\n    },\n    keys: {\n      backspace: 8,\n      delimiter: 188,\n      // comma\n      deleteKey: 46,\n      enter: 13,\n      escape: 27,\n      pageUp: 33,\n      pageDown: 34,\n      leftArrow: 37,\n      upArrow: 38,\n      rightArrow: 39,\n      downArrow: 40\n    },\n    selector: {\n      addition: '.addition',\n      dropdown: '.ui.dropdown',\n      hidden: '.hidden',\n      icon: '> .dropdown.icon',\n      input: '> input[type=\"hidden\"], > select',\n      item: '.item',\n      label: '> .label',\n      remove: '> .label > .delete.icon',\n      siblingLabel: '.label',\n      menu: '.menu',\n      message: '.message',\n      menuIcon: '.dropdown.icon',\n      search: 'input.search, .menu > .search > input, .menu input.search',\n      sizer: '> input.sizer',\n      text: '> .text:not(.icon)',\n      unselectable: '.disabled, .filtered'\n    },\n    className: {\n      active: 'active',\n      addition: 'addition',\n      animating: 'animating',\n      clear: 'clear',\n      disabled: 'disabled',\n      empty: 'empty',\n      dropdown: 'ui dropdown',\n      filtered: 'filtered',\n      hidden: 'hidden transition',\n      item: 'item',\n      label: 'ui label',\n      loading: 'loading',\n      menu: 'menu',\n      message: 'message',\n      multiple: 'multiple',\n      placeholder: 'default',\n      sizer: 'sizer',\n      search: 'search',\n      selected: 'selected',\n      selection: 'selection',\n      upward: 'upward',\n      leftward: 'left',\n      visible: 'visible'\n    }\n  };\n  /* Templates */\n\n  _module.exports.settings.templates = {\n    // generates dropdown from select values\n    dropdown: function dropdown(select) {\n      var placeholder = select.placeholder || false,\n          values = select.values || {},\n          html = '';\n      html += '<i class=\"dropdown icon\"></i>';\n\n      if (select.placeholder) {\n        html += '<div class=\"default text\">' + placeholder + '</div>';\n      } else {\n        html += '<div class=\"text\"></div>';\n      }\n\n      html += '<div class=\"menu\">';\n      $.each(select.values, function (index, option) {\n        html += option.disabled ? '<div class=\"disabled item\" data-value=\"' + option.value + '\">' + option.name + '</div>' : '<div class=\"item\" data-value=\"' + option.value + '\">' + option.name + '</div>';\n      });\n      html += '</div>';\n      return html;\n    },\n    // generates just menu from select\n    menu: function menu(response, fields) {\n      var values = response[fields.values] || {},\n          html = '';\n      $.each(values, function (index, option) {\n        var maybeText = option[fields.text] ? 'data-text=\"' + option[fields.text] + '\"' : '',\n            maybeDisabled = option[fields.disabled] ? 'disabled ' : '';\n        html += '<div class=\"' + maybeDisabled + 'item\" data-value=\"' + option[fields.value] + '\"' + maybeText + '>';\n        html += option[fields.name];\n        html += '</div>';\n      });\n      return html;\n    },\n    // generates label for multiselect\n    label: function label(value, text) {\n      return text + '<i class=\"delete icon\"></i>';\n    },\n    // generates messages like \"No results\"\n    message: function message(_message2) {\n      return _message2;\n    },\n    // generates user addition to selection menu\n    addition: function addition(choice) {\n      return choice;\n    }\n  };\n})(require(\"jquery\"), window, document);","map":null,"metadata":{},"sourceType":"script"}